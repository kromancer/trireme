Bootstrap: docker
From: ubuntu:22.04

%post
    # Install dependencies
    apt update && apt upgrade -y && apt-get install -y \
        git build-essential cmake ninja-build patchelf \
        libreadline-dev libncursesw5-dev libssl-dev \
        libsqlite3-dev libgdbm-dev libc6-dev libbz2-dev \
        libffi-dev zlib1g-dev \
        lsb-release wget software-properties-common gnupg \
        flex bison \
        libelf-dev libnewt-dev libdw-dev libaudit-dev libiberty-dev \
        libunwind-dev libcap-dev libzstd-dev libnuma-dev libssl-dev \
        binutils-dev gcc-multilib liblzma-dev hwloc

    # Switch to a temporary directory
    # Accepts env variable $TMP
    if [ -z "$TMP" ] || [ ! -d "$TMP" ]; then
        TMP=/tmp
    fi

    # Get intel's vtune
    wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/56d0db2b-1ff1-4abe-857a-72ca9be22bd3/l_oneapi_vtune_p_2024.0.1.14_offline.sh
    chmod +x l_oneapi_vtune_p_2024.0.1.14_offline.sh
    ./l_oneapi_vtune_p_2024.0.1.14_offline.sh -a -s --eula accept --install-dir /opt/vtune

    # Build Python from source
    VERSION="3.10.13"
    VERSION_MAJOR=${VERSION%.*}
    PYTHON_DIR="/opt/python"

    mkdir -p $PYTHON_DIR

    cd $TMP
    wget https://www.python.org/ftp/python/$VERSION/Python-$VERSION.tar.xz
    tar -xvf Python-$VERSION.tar.xz
    cd Python-$VERSION/
    ./configure --enable-optimizations --with-lto --prefix=$PYTHON_DIR --with-ensurepip
    make altinstall

    # Get & build the llvm-project
    cd $TMP
    rm -rf llvm-project
    git clone https://github.com/llvm/llvm-project.git
    cd llvm-project
    /opt/python/bin/python$VERSION_MAJOR -m venv venv
    . ./venv/bin/activate
    pip install -r mlir/python/requirements.txt
    pip install pexpect
    mkdir /opt/llvm
    mkdir build
    cd build
    cmake -G Ninja ../llvm -DLLVM_ENABLE_PROJECTS="clang;mlir;polly;openmp;lldb" -DCMAKE_INSTALL_PREFIX=/opt/llvm -DPython3_EXECUTABLE=python -DMLIR_ENABLE_BINDINGS_PYTHON=ON -DLLVM_USE_PERF=ON -DLLVM_BUILD_EXAMPLES=ON -DLLVM_TARGETS_TO_BUILD="Native" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    ninja -j12 install

    # Get the linux kernel and build perf
    # Assumes that the machine building the image will run the container:
    cd $TMP
    rm -rf linux
    git clone https://github.com/torvalds/linux.git
    cd linux
    KERNEL_VERSION=$(uname -r | cut -d'.' -f1,2)
    git checkout v$KERNEL_VERSION

    mkdir -p /opt/perf
    PYTHON=/opt/python/bin/python$VERSION_MAJOR make CFLAGS="-Wno-error=maybe-uninitialized" LDFLAGS="-Wno-error=maybe-uninitialized" -C tools/perf prefix=/opt/perf install

    # Get pmu-tools
    cd /opt
    git clone https://github.com/andikleen/pmu-tools


%environment
    export PATH=/opt/llvm/bin:/opt/python/bin:/opt/perf/bin:/opt/pmu-tools:/opt/vtune/vtune/latest/bin64:$PATH
    export PYTHONPATH=/opt/llvm/python_packages/mlir_core
    export LLVM_PATH=/opt/llvm
    export OMP_DISPLAY_ENV=true

%runscript
    exec /bin/bash "$@"
