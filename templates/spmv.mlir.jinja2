#map = affine_map<(d0, d1) -> (d0, d1)>
#map1 = affine_map<(d0, d1) -> (d1)>
#map2 = affine_map<(d0, d1) -> (d0)>
#CSR = #sparse_tensor.encoding<{ map = (d0, d1) -> (d0: dense, d1: compressed) }>

module {
  func.func @spmv(%mat: tensor<{{ rows }}x{{ cols }}xf64, #CSR>,
                  %vec: tensor<{{ cols }}xf64>,
                  %res: tensor<{{ rows }}xf64>) -> tensor<{{ rows }}xf64> {
    %0 = linalg.generic {indexing_maps = [#map, #map1, #map2], iterator_types = ["parallel", "reduction"]} ins(%mat, %vec : tensor<{{ rows }}x{{ cols }}xf64, #CSR>, tensor<{{ cols }}xf64>) outs(%res : tensor<{{ rows }}xf64>) {
    ^bb0(%in: f64, %in_0: f64, %out: f64):
      %1 = arith.mulf %in, %in_0 : f64
      %2 = arith.addf %out, %1 : f64
      linalg.yield %2 : f64
    } -> tensor<{{ rows }}xf64>
    return %0 : tensor<{{ rows }}xf64>
  }
}
