#sparse = {{ encoding }}

// Computes: a(i) = B(i,j) * c(j)
func.func @spmv(%a_t: {{ out_type }},
                %B: {{ mat_type }},
                %c_t: {{ vtype }}) -> {{ out_type }} {

    %c3 = arith.constant {{ rows }} : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index

    %Bj_pos = sparse_tensor.positions %B {level = 1 : index} : {{ mat_type }} to memref<?x{{ itype }}>
    %Bj_crd = sparse_tensor.coordinates %B {level = 1 : index} : {{ mat_type }} to memref<?x{{ itype }}>
    %B_vals = sparse_tensor.values %B : {{ mat_type }} to memref<?x{{ dtype }}>

    %c = bufferization.to_memref %c_t : {{ vtype }} to memref<{{ cols }}x{{ dtype }}>
    %a = bufferization.to_memref %a_t : {{ out_type }} to memref<{{ rows }}x{{ dtype }}>

    // Fixed lookahead distance
    %dist = arith.constant {{ pd }} : index
    %double_dist = arith.muli %dist, %c2 : index

    scf.for %i = %c0 to %c3 step %c1 {
        %6 = memref.load %a[%i] : memref<{{ rows }}x{{ dtype }}>

        // Load position of Bj segment start
        %seg_start_itype = memref.load %Bj_pos[%i] : memref<?x{{ itype }}>
    {% if itype == "i64" %}
        %seg_start = arith.index_cast %seg_start_itype : {{ itype }} to index
    {% else %}
        %seg_start_extui = arith.extui %seg_start_itype : {{ itype }} to i64
        %seg_start = arith.index_cast %seg_start_extui : i64 to index
    {% endif %}

        // Load position of Bj segment end
        %i_plus_one = arith.addi %i, %c1 : index
        %seg_end_itype = memref.load %Bj_pos[%i_plus_one] : memref<?x{{ itype }}>
    {% if itype == "i64" %}
        %seg_end = arith.index_cast %seg_end_itype : {{ itype }} to index
    {% else %}
        %seg_end_extui = arith.extui %seg_end_itype : {{ itype }} to i64
        %seg_end = arith.index_cast %seg_end_extui : i64 to index
    {% endif %}

        %bound = arith.subi %seg_end, %c1 : index

        %a_i = scf.for %jj = %seg_start to %seg_end step %c1 iter_args(%arg5 = %6) -> ({{ dtype }}) {
            %j_itype = memref.load %Bj_crd[%jj] : memref<?x{{ itype }}>
        {% if itype == "i64" %}
            %j = arith.index_cast %j_itype : {{ itype }} to index
        {% else %}
            %j_itype_extui = arith.extui %j_itype : {{ itype }} to i64
            %j = arith.index_cast %j_itype_extui : i64 to index
        {% endif %}

            // Prefetch Bj_crd[jj + 2 * dist]
            %jj_plus_double_dist = arith.addi %jj, %double_dist : index
            memref.prefetch %Bj_crd[%jj_plus_double_dist], read, locality<{{ loc_hint }}>, data : memref<?x{{ itype }}>

            // Load Bj_crd[min(j + dist, bound)]
            %jj_plus_dist = arith.addi %jj, %dist : index
            %jj_plus_dist_or_bound = arith.minui %jj_plus_dist, %bound : index
            %Bj_crd_jj_plus_dist_or_bound_itype = memref.load %Bj_crd[%jj_plus_dist_or_bound] : memref<?x{{ itype }}>
        {% if itype == "i64" %}
            %Bj_crd_jj_plus_dist_or_bound = arith.index_cast %Bj_crd_jj_plus_dist_or_bound_itype : {{ itype }} to index
        {% else %}
            %Bj_crd_jj_plus_dist_or_bound_extui = arith.extui %Bj_crd_jj_plus_dist_or_bound_itype : {{ itype }} to i64
            %Bj_crd_jj_plus_dist_or_bound = arith.index_cast %Bj_crd_jj_plus_dist_or_bound_extui : i64 to index
        {% endif %}

            // Prefetch c[Bj_crd[%Bj_crd_jj_plus_dist_or_seg_end]]
            memref.prefetch %c[%Bj_crd_jj_plus_dist_or_bound], read, locality<{{ loc_hint }}>, data : memref<{{ cols }}x{{ dtype }}>
            %Bij = memref.load %B_vals[%jj] : memref<?x{{ dtype }}>
            %cj = memref.load %c[%j] : memref<{{ cols }}x{{ dtype }}>
            %mul = {{ mul_op }} %Bij, %cj : {{ dtype }}
            %a_i = {{ add_op }} %arg5, %mul : {{ dtype }}
            scf.yield %a_i : {{ dtype }}
        }

        memref.store %a_i, %a[%i] : memref<{{ rows }}x{{ dtype }}>
    }

{% if is_symmetric %}
    scf.for %i = %c0 to %c3 step %c1 {
        %ci = memref.load %c[%i] : memref<{{ cols }}x{{ dtype }}>

        // Load position of Bj segment start
        %seg_start_itype = memref.load %Bj_pos[%i] : memref<?x{{ itype }}>
    {% if itype == "i64" %}
        %seg_start = arith.index_cast %seg_start_itype : {{ itype }} to index
    {% else %}
        %seg_start_extui = arith.extui %seg_start_itype : {{ itype }} to i64
        %seg_start = arith.index_cast %seg_start_extui : i64 to index
    {% endif %}

        // Load position of Bj segment end
        %i_plus_one = arith.addi %i, %c1 : index
        %seg_end_itype = memref.load %Bj_pos[%i_plus_one] : memref<?x{{ itype }}>
    {% if itype == "i64" %}
        %seg_end = arith.index_cast %seg_end_itype : {{ itype }} to index
    {% else %}
        %seg_end_extui = arith.extui %seg_end_itype : {{ itype }} to i64
        %seg_end = arith.index_cast %seg_end_extui : i64 to index
    {% endif %}

        %bound = arith.subi %seg_end, %c1 : index

        scf.for %jj = %seg_start to %seg_end step %c1 {
            %j_itype = memref.load %Bj_crd[%jj] : memref<?x{{ itype }}>
        {% if itype == "i64" %}
            %j = arith.index_cast %j_itype : {{ itype }} to index
        {% else %}
            %j_itype_extui = arith.extui %j_itype : {{ itype }} to i64
            %j = arith.index_cast %j_itype_extui : i64 to index
        {% endif %}

            // Prefetch Bj_crd[jj + 2 * dist]
            %jj_plus_double_dist = arith.addi %jj, %double_dist : index
            memref.prefetch %Bj_crd[%jj_plus_double_dist], read, locality<{{ loc_hint }}>, data : memref<?x {{ itype }}>

            // Load Bj_crd[min(j + dist, j_end)]
            %jj_plus_dist = arith.addi %jj, %dist : index
            %jj_plus_dist_or_bound = arith.minui %jj_plus_dist, %bound : index
            %Bj_crd_jj_plus_dist_or_bound_itype = memref.load %Bj_crd[%jj_plus_dist_or_bound] : memref<?x{{ itype }}>
        {% if itype == "i64" %}
            %Bj_crd_jj_plus_dist_or_bound = arith.index_cast %Bj_crd_jj_plus_dist_or_bound_itype : {{ itype }} to index
        {% else %}
            %Bj_crd_jj_plus_dist_or_bound_extui = arith.extui %Bj_crd_jj_plus_dist_or_bound_itype : {{ itype }} to i64
            %Bj_crd_jj_plus_dist_or_bound = arith.index_cast %Bj_crd_jj_plus_dist_or_bound_extui : i64 to index
        {% endif %}

            // Prefetch a[Bj_crd[%Bj_crd_jj_plus_dist_or_seg_end]]
            memref.prefetch %a[%Bj_crd_jj_plus_dist_or_bound], read, locality<{{ loc_hint }}>, data : memref<{{ rows }}x{{ dtype }}>

            %Bij = memref.load %B_vals[%jj] : memref<?x{{ dtype }}>
            %aj = memref.load %a[%j] : memref<{{ rows }}x{{ dtype }}>
            %mul = {{ mul_op }} %Bij, %ci : {{ dtype }}
            %res = {{ add_op }} %aj, %mul : {{ dtype }}

            // Only update a if not on main diagonal of B
            %is_diag = arith.cmpi eq, %i, %j : index
            %store = arith.select %is_diag, %aj, %res : {{ dtype }}
            memref.store %store, %a[%j] : memref<{{ rows }}x{{ dtype }}>
        }
    }
{% endif %}

    %tmp = bufferization.to_tensor %a restrict : memref<{{ rows }}x{{ dtype }}> to {{ out_type }}
    return %tmp : {{ out_type }}
}
