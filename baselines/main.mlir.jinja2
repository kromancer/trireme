func.func @main(%vec: tensor<{{ cols }}xf64>,
                %res: tensor<{{ rows }}xf64>,
                %mat: tensor<{{ rows }}x{{ cols }}xf64, #CSR>) -> tensor<{{ rows }}xf64> attributes { llvm.emit_c_interface } {

    call @start_measurement_callback() : () -> ()
    %time_before = call @nanoTime() : () -> i64

    %0 = call @spmv(%vec, %res, %mat) : (tensor<{{ cols }}xf64>, tensor<{{ rows }}xf64>, tensor<{{ rows }}x{{ cols }}xf64, #CSR>) -> tensor<{{ rows }}xf64>

    %time_after = call @nanoTime() : () -> i64
    %diff = arith.subi %time_after, %time_before : i64
    call @stop_measurement_callback(%diff) : (i64) -> ()

    return %0 : tensor<{{ rows }}xf64>
}

func.func private @start_measurement_callback() -> () attributes { llvm.emit_c_interface }
func.func private @stop_measurement_callback(%dur_ns: i64) -> () attributes { llvm.emit_c_interface }
func.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }
