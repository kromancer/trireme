#CSR = #sparse_tensor.encoding<{ map = (d0, d1) -> (d0: dense, d1: compressed) }>

module {

func.func private @start_measurement_callback() -> () attributes { llvm.emit_c_interface }
func.func private @stop_measurement_callback(%dur_ns: i64) -> () attributes { llvm.emit_c_interface }
func.func private @nanoTime() -> i64 attributes { llvm.emit_c_interface }

func.func @spmv(%sparseT: tensor<{{ rows }}x{{ cols }}xf64, #CSR>,
                %vec: tensor<{{ cols }}xf64>,
                %res: tensor<{{ rows }}xf64>) -> tensor<{{ rows }}xf64> {

    call @start_measurement_callback() : () -> ()
    %time_before = call @nanoTime() : () -> i64

    %c3 = arith.constant {{ rows }} : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index

    %pos = sparse_tensor.positions %sparseT {level = 1 : index} : tensor<{{ rows }}x{{ cols }}xf64, #CSR> to memref<?xindex>
    %crd = sparse_tensor.coordinates %sparseT {level = 1 : index} : tensor<{{ rows }}x{{ cols }}xf64, #CSR> to memref<?xindex>
    %mat_vals = sparse_tensor.values %sparseT : tensor<{{ rows }}x{{ cols }}xf64, #CSR> to memref<?xf64>

    %vec_vals = bufferization.to_memref %vec : memref<{{ cols }}xf64>
    %res_buff = bufferization.to_memref %res : memref<{{ rows }}xf64>

    // Fixed lookahead distance
    %dist = arith.constant {{ pd }} : index
    %dist_double = arith.muli %dist, %c2 : index

    scf.for %i = %c0 to %c3 step %c1 {
        %6 = memref.load %res_buff[%i] : memref<{{ rows }}xf64>

        // Load j_start
        %j_start = memref.load %pos[%i] : memref<?xindex>

        // Load j_end
        %i_plus_one = arith.addi %i, %c1 : index
        %j_end = memref.load %pos[%i_plus_one] : memref<?xindex>

        %res_i = scf.for %j = %j_start to %j_end step %c1 iter_args(%arg5 = %6) -> (f64) {

            //  Load column indices and values for non-zero elements
            %col_idx = memref.load %crd[%j] : memref<?xindex>
            %mat_j = memref.load %mat_vals[%j] : memref<?xf64>
            %vec_val = memref.load %vec_vals[%col_idx] : memref<{{ cols }}xf64>

            // Prefetch crd[j + 2 * dist],
            %j_dist_double = arith.addi %j, %dist_double : index
            memref.prefetch %crd[%j_dist_double], read, locality<{{ loc_hint }}>, data : memref<?xindex>

            // Load crd[min(j + dist, j_end)]
            %j_dist = arith.addi %j, %dist : index
            %j_dist_or_bound = arith.minui %j_dist, %j_end : index
            %crd_dist = memref.load %crd[%j_dist_or_bound] : memref<?xindex>

            // Prefetch vec_vals[crd[%crd_dist]]
            memref.prefetch %vec_vals[%crd_dist], read, locality<{{ loc_hint }}>, data : memref<{{ cols }}xf64>

            %14 = arith.mulf %mat_j, %vec_val : f64
            %15 = arith.addf %arg5, %14 : f64
            scf.yield %15 : f64
        }

        memref.store %res_i, %res_buff[%i] : memref<{{ rows }}xf64>
    }

    %5 = bufferization.to_tensor %res_buff restrict : memref<{{ rows }}xf64>

    %time_after = call @nanoTime() : () -> i64
    %diff = arith.subi %time_after, %time_before : i64
    call @stop_measurement_callback(%diff) : (i64) -> ()

    return %5 : tensor<{{ rows }}xf64>

} // func

func.func @main(%dense_mat: tensor<{{ rows }}x{{ cols }}xf64>,
                %dense_vec: tensor<{{ cols }}xf64>,
                %c: tensor<{{ rows }}xf64>) -> tensor<{{ rows }}xf64> attributes { llvm.emit_c_interface } {

    %sparse = sparse_tensor.convert %dense_mat : tensor<{{ rows }}x{{ cols }}xf64> to tensor<{{ rows }}x{{ cols }}xf64, #CSR>
    %0 = call @spmv(%sparse, %dense_vec, %c) : (tensor<{{ rows }}x{{ cols }}xf64, #CSR>, tensor<{{ cols }}xf64>, tensor<{{ rows }}xf64>) -> tensor<{{ rows }}xf64>
    return %0 : tensor<{{ rows }}xf64>
}

} // module
