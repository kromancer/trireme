module {
  func.func @vector_arm_neon_mixed_types(%arg0: vector<2x8xi8>, %arg1: vector<2x8xi4>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %cst = arith.constant dense<0> : vector<2x2xi32>
    %2 = builtin.unrealized_conversion_cast %cst : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %cst_0 = arith.constant dense<0> : vector<4xi32>
    %cst_1 = arith.constant dense<0> : vector<16xi8>
    %3 = arith.extsi %arg1 : vector<2x8xi4> to vector<2x8xi8>
    %4 = builtin.unrealized_conversion_cast %3 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %5 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<8xi8>>
    %6 = llvm.shufflevector %5, %5 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %7 = llvm.shufflevector %6, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %8 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<8xi8>>
    %9 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %10 = llvm.shufflevector %9, %7 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %11 = llvm.extractvalue %4[0] : !llvm.array<2 x vector<8xi8>>
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %13 = llvm.shufflevector %12, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %14 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %15 = llvm.shufflevector %14, %14 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %16 = llvm.shufflevector %15, %13 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %17 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<2xi32>>
    %18 = llvm.shufflevector %17, %17 [0, 1, 0, 0] : vector<2xi32>
    %19 = llvm.shufflevector %18, %cst_0 [0, 1, 6, 7] : vector<4xi32>
    %20 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<2xi32>>
    %21 = llvm.shufflevector %20, %20 [0, 1, 0, 0] : vector<2xi32>
    %22 = llvm.shufflevector %21, %19 [4, 5, 0, 1] : vector<4xi32>
    %23 = arm_neon.intr.smmla %22, %10, %16 : vector<16xi8> to vector<4xi32>
    %24 = llvm.shufflevector %23, %23 [0, 1] : vector<4xi32>
    %25 = llvm.insertvalue %24, %2[0] : !llvm.array<2 x vector<2xi32>>
    %26 = llvm.shufflevector %23, %23 [2, 3] : vector<4xi32>
    %27 = llvm.insertvalue %26, %25[1] : !llvm.array<2 x vector<2xi32>>
    %28 = builtin.unrealized_conversion_cast %27 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %28 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_same_types(%arg0: vector<2x8xi8>, %arg1: vector<2x8xi8>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg1 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %cst = arith.constant dense<0> : vector<2x2xi32>
    %3 = builtin.unrealized_conversion_cast %cst : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %cst_0 = arith.constant dense<0> : vector<4xi32>
    %cst_1 = arith.constant dense<0> : vector<16xi8>
    %4 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<8xi8>>
    %5 = llvm.shufflevector %4, %4 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %6 = llvm.shufflevector %5, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %7 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>>
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %9 = llvm.shufflevector %8, %6 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %10 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<8xi8>>
    %11 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %12 = llvm.shufflevector %11, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %13 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<8xi8>>
    %14 = llvm.shufflevector %13, %13 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %15 = llvm.shufflevector %14, %12 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %16 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<2xi32>>
    %17 = llvm.shufflevector %16, %16 [0, 1, 0, 0] : vector<2xi32>
    %18 = llvm.shufflevector %17, %cst_0 [0, 1, 6, 7] : vector<4xi32>
    %19 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<2xi32>>
    %20 = llvm.shufflevector %19, %19 [0, 1, 0, 0] : vector<2xi32>
    %21 = llvm.shufflevector %20, %18 [4, 5, 0, 1] : vector<4xi32>
    %22 = arm_neon.intr.smmla %21, %9, %15 : vector<16xi8> to vector<4xi32>
    %23 = llvm.shufflevector %22, %22 [0, 1] : vector<4xi32>
    %24 = llvm.insertvalue %23, %3[0] : !llvm.array<2 x vector<2xi32>>
    %25 = llvm.shufflevector %22, %22 [2, 3] : vector<4xi32>
    %26 = llvm.insertvalue %25, %24[1] : !llvm.array<2 x vector<2xi32>>
    %27 = builtin.unrealized_conversion_cast %26 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %27 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_without_extsi(%arg0: vector<2x8xi32>, %arg1: vector<2x8xi32>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<2x8xi32> to !llvm.array<2 x vector<8xi32>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<2x8xi32> to !llvm.array<2 x vector<8xi32>>
    %cst = arith.constant dense<0> : vector<2x2xi32>
    %2 = builtin.unrealized_conversion_cast %cst : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %3 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<8xi32>>
    %4 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<8xi32>>
    %5 = arith.muli %3, %4 : vector<8xi32>
    %6 = "llvm.intr.vector.reduce.add"(%5) : (vector<8xi32>) -> i32
    %7 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<2xi32>>
    %8 = llvm.mlir.constant(0 : i64) : i64
    %9 = llvm.insertelement %6, %7[%8 : i64] : vector<2xi32>
    %10 = llvm.insertvalue %9, %2[0] : !llvm.array<2 x vector<2xi32>>
    %11 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<8xi32>>
    %12 = arith.muli %3, %11 : vector<8xi32>
    %13 = "llvm.intr.vector.reduce.add"(%12) : (vector<8xi32>) -> i32
    %14 = llvm.extractvalue %10[0] : !llvm.array<2 x vector<2xi32>>
    %15 = llvm.mlir.constant(1 : i64) : i64
    %16 = llvm.insertelement %13, %14[%15 : i64] : vector<2xi32>
    %17 = llvm.insertvalue %16, %10[0] : !llvm.array<2 x vector<2xi32>>
    %18 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<8xi32>>
    %19 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<8xi32>>
    %20 = arith.muli %18, %19 : vector<8xi32>
    %21 = "llvm.intr.vector.reduce.add"(%20) : (vector<8xi32>) -> i32
    %22 = llvm.extractvalue %17[1] : !llvm.array<2 x vector<2xi32>>
    %23 = llvm.mlir.constant(0 : i64) : i64
    %24 = llvm.insertelement %21, %22[%23 : i64] : vector<2xi32>
    %25 = llvm.insertvalue %24, %17[1] : !llvm.array<2 x vector<2xi32>>
    %26 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<8xi32>>
    %27 = arith.muli %18, %26 : vector<8xi32>
    %28 = "llvm.intr.vector.reduce.add"(%27) : (vector<8xi32>) -> i32
    %29 = llvm.extractvalue %25[1] : !llvm.array<2 x vector<2xi32>>
    %30 = llvm.mlir.constant(1 : i64) : i64
    %31 = llvm.insertelement %28, %29[%30 : i64] : vector<2xi32>
    %32 = llvm.insertvalue %31, %25[1] : !llvm.array<2 x vector<2xi32>>
    %33 = builtin.unrealized_conversion_cast %32 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %34 = arith.addi %33, %arg2 : vector<2x2xi32>
    return %34 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_unroll(%arg0: vector<4x8xi8>, %arg1: vector<4x8xi8>, %arg2: vector<4x4xi32>) -> vector<4x4xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<4x8xi8> to !llvm.array<4 x vector<8xi8>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<4x8xi8> to !llvm.array<4 x vector<8xi8>>
    %2 = builtin.unrealized_conversion_cast %arg2 : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %cst = arith.constant dense<0> : vector<4xi32>
    %cst_0 = arith.constant dense<0> : vector<16xi8>
    %cst_1 = arith.constant dense<0> : vector<4x4xi32>
    %3 = builtin.unrealized_conversion_cast %cst_1 : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %4 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<4xi32>>
    %5 = llvm.shufflevector %4, %4 [0, 1] : vector<4xi32>
    %6 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<4xi32>>
    %7 = llvm.shufflevector %6, %6 [0, 1] : vector<4xi32>
    %8 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<8xi8>>
    %9 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %10 = llvm.shufflevector %9, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %11 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<8xi8>>
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %13 = llvm.shufflevector %12, %10 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %14 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<8xi8>>
    %15 = llvm.shufflevector %14, %14 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %16 = llvm.shufflevector %15, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %17 = llvm.extractvalue %0[1] : !llvm.array<4 x vector<8xi8>>
    %18 = llvm.shufflevector %17, %17 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %19 = llvm.shufflevector %18, %16 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %20 = llvm.shufflevector %5, %5 [0, 1, 0, 0] : vector<2xi32>
    %21 = llvm.shufflevector %20, %cst [0, 1, 6, 7] : vector<4xi32>
    %22 = llvm.shufflevector %7, %7 [0, 1, 0, 0] : vector<2xi32>
    %23 = llvm.shufflevector %22, %21 [4, 5, 0, 1] : vector<4xi32>
    %24 = arm_neon.intr.smmla %23, %13, %19 : vector<16xi8> to vector<4xi32>
    %25 = llvm.shufflevector %24, %24 [0, 1] : vector<4xi32>
    %26 = llvm.shufflevector %24, %24 [2, 3] : vector<4xi32>
    %27 = llvm.extractvalue %3[0] : !llvm.array<4 x vector<4xi32>>
    %28 = llvm.shufflevector %25, %25 [0, 1, 0, 0] : vector<2xi32>
    %29 = llvm.shufflevector %28, %27 [0, 1, 6, 7] : vector<4xi32>
    %30 = llvm.insertvalue %29, %3[0] : !llvm.array<4 x vector<4xi32>>
    %31 = llvm.extractvalue %3[1] : !llvm.array<4 x vector<4xi32>>
    %32 = llvm.shufflevector %26, %26 [0, 1, 0, 0] : vector<2xi32>
    %33 = llvm.shufflevector %32, %31 [0, 1, 6, 7] : vector<4xi32>
    %34 = llvm.insertvalue %33, %30[1] : !llvm.array<4 x vector<4xi32>>
    %35 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<4xi32>>
    %36 = llvm.shufflevector %35, %35 [2, 3] : vector<4xi32>
    %37 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<4xi32>>
    %38 = llvm.shufflevector %37, %37 [2, 3] : vector<4xi32>
    %39 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<8xi8>>
    %40 = llvm.shufflevector %39, %39 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %41 = llvm.shufflevector %40, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %42 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<8xi8>>
    %43 = llvm.shufflevector %42, %42 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %44 = llvm.shufflevector %43, %41 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %45 = llvm.extractvalue %0[2] : !llvm.array<4 x vector<8xi8>>
    %46 = llvm.shufflevector %45, %45 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %47 = llvm.shufflevector %46, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %48 = llvm.extractvalue %0[3] : !llvm.array<4 x vector<8xi8>>
    %49 = llvm.shufflevector %48, %48 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %50 = llvm.shufflevector %49, %47 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %51 = llvm.shufflevector %36, %36 [0, 1, 0, 0] : vector<2xi32>
    %52 = llvm.shufflevector %51, %cst [0, 1, 6, 7] : vector<4xi32>
    %53 = llvm.shufflevector %38, %38 [0, 1, 0, 0] : vector<2xi32>
    %54 = llvm.shufflevector %53, %52 [4, 5, 0, 1] : vector<4xi32>
    %55 = arm_neon.intr.smmla %54, %44, %50 : vector<16xi8> to vector<4xi32>
    %56 = llvm.shufflevector %55, %55 [0, 1] : vector<4xi32>
    %57 = llvm.shufflevector %55, %55 [2, 3] : vector<4xi32>
    %58 = llvm.shufflevector %56, %56 [0, 1, 0, 0] : vector<2xi32>
    %59 = llvm.shufflevector %58, %29 [4, 5, 0, 1] : vector<4xi32>
    %60 = llvm.insertvalue %59, %34[0] : !llvm.array<4 x vector<4xi32>>
    %61 = llvm.shufflevector %57, %57 [0, 1, 0, 0] : vector<2xi32>
    %62 = llvm.shufflevector %61, %33 [4, 5, 0, 1] : vector<4xi32>
    %63 = llvm.insertvalue %62, %60[1] : !llvm.array<4 x vector<4xi32>>
    %64 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<4xi32>>
    %65 = llvm.shufflevector %64, %64 [0, 1] : vector<4xi32>
    %66 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<4xi32>>
    %67 = llvm.shufflevector %66, %66 [0, 1] : vector<4xi32>
    %68 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<8xi8>>
    %69 = llvm.shufflevector %68, %68 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %70 = llvm.shufflevector %69, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %71 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<8xi8>>
    %72 = llvm.shufflevector %71, %71 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %73 = llvm.shufflevector %72, %70 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %74 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<8xi8>>
    %75 = llvm.shufflevector %74, %74 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %76 = llvm.shufflevector %75, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %77 = llvm.extractvalue %0[1] : !llvm.array<4 x vector<8xi8>>
    %78 = llvm.shufflevector %77, %77 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %79 = llvm.shufflevector %78, %76 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %80 = llvm.shufflevector %65, %65 [0, 1, 0, 0] : vector<2xi32>
    %81 = llvm.shufflevector %80, %cst [0, 1, 6, 7] : vector<4xi32>
    %82 = llvm.shufflevector %67, %67 [0, 1, 0, 0] : vector<2xi32>
    %83 = llvm.shufflevector %82, %81 [4, 5, 0, 1] : vector<4xi32>
    %84 = arm_neon.intr.smmla %83, %73, %79 : vector<16xi8> to vector<4xi32>
    %85 = llvm.shufflevector %84, %84 [0, 1] : vector<4xi32>
    %86 = llvm.shufflevector %84, %84 [2, 3] : vector<4xi32>
    %87 = llvm.extractvalue %3[2] : !llvm.array<4 x vector<4xi32>>
    %88 = llvm.shufflevector %85, %85 [0, 1, 0, 0] : vector<2xi32>
    %89 = llvm.shufflevector %88, %87 [0, 1, 6, 7] : vector<4xi32>
    %90 = llvm.insertvalue %89, %63[2] : !llvm.array<4 x vector<4xi32>>
    %91 = llvm.extractvalue %3[3] : !llvm.array<4 x vector<4xi32>>
    %92 = llvm.shufflevector %86, %86 [0, 1, 0, 0] : vector<2xi32>
    %93 = llvm.shufflevector %92, %91 [0, 1, 6, 7] : vector<4xi32>
    %94 = llvm.insertvalue %93, %90[3] : !llvm.array<4 x vector<4xi32>>
    %95 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<4xi32>>
    %96 = llvm.shufflevector %95, %95 [2, 3] : vector<4xi32>
    %97 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<4xi32>>
    %98 = llvm.shufflevector %97, %97 [2, 3] : vector<4xi32>
    %99 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<8xi8>>
    %100 = llvm.shufflevector %99, %99 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %101 = llvm.shufflevector %100, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %102 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<8xi8>>
    %103 = llvm.shufflevector %102, %102 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %104 = llvm.shufflevector %103, %101 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %105 = llvm.extractvalue %0[2] : !llvm.array<4 x vector<8xi8>>
    %106 = llvm.shufflevector %105, %105 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %107 = llvm.shufflevector %106, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %108 = llvm.extractvalue %0[3] : !llvm.array<4 x vector<8xi8>>
    %109 = llvm.shufflevector %108, %108 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %110 = llvm.shufflevector %109, %107 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %111 = llvm.shufflevector %96, %96 [0, 1, 0, 0] : vector<2xi32>
    %112 = llvm.shufflevector %111, %cst [0, 1, 6, 7] : vector<4xi32>
    %113 = llvm.shufflevector %98, %98 [0, 1, 0, 0] : vector<2xi32>
    %114 = llvm.shufflevector %113, %112 [4, 5, 0, 1] : vector<4xi32>
    %115 = arm_neon.intr.smmla %114, %104, %110 : vector<16xi8> to vector<4xi32>
    %116 = llvm.shufflevector %115, %115 [0, 1] : vector<4xi32>
    %117 = llvm.shufflevector %115, %115 [2, 3] : vector<4xi32>
    %118 = llvm.shufflevector %116, %116 [0, 1, 0, 0] : vector<2xi32>
    %119 = llvm.shufflevector %118, %89 [4, 5, 0, 1] : vector<4xi32>
    %120 = llvm.insertvalue %119, %94[2] : !llvm.array<4 x vector<4xi32>>
    %121 = llvm.shufflevector %117, %117 [0, 1, 0, 0] : vector<2xi32>
    %122 = llvm.shufflevector %121, %93 [4, 5, 0, 1] : vector<4xi32>
    %123 = llvm.insertvalue %122, %120[3] : !llvm.array<4 x vector<4xi32>>
    %124 = builtin.unrealized_conversion_cast %123 : !llvm.array<4 x vector<4xi32>> to vector<4x4xi32>
    return %124 : vector<4x4xi32>
  }
  func.func @vector_arm_neon_mixed_unroll(%arg0: vector<4x8xi8>, %arg1: vector<2x8xi4>, %arg2: vector<4x2xi32>) -> vector<4x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<4x2xi32> to !llvm.array<4 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<4x8xi8> to !llvm.array<4 x vector<8xi8>>
    %cst = arith.constant dense<0> : vector<4xi32>
    %cst_0 = arith.constant dense<0> : vector<16xi8>
    %cst_1 = arith.constant dense<0> : vector<4x2xi32>
    %2 = builtin.unrealized_conversion_cast %cst_1 : vector<4x2xi32> to !llvm.array<4 x vector<2xi32>>
    %3 = arith.extsi %arg1 : vector<2x8xi4> to vector<2x8xi8>
    %4 = builtin.unrealized_conversion_cast %3 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %5 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<8xi8>>
    %6 = llvm.shufflevector %5, %5 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %7 = llvm.shufflevector %6, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %8 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<8xi8>>
    %9 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %10 = llvm.shufflevector %9, %7 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %11 = llvm.extractvalue %4[0] : !llvm.array<2 x vector<8xi8>>
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %13 = llvm.shufflevector %12, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %14 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %15 = llvm.shufflevector %14, %14 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %16 = llvm.shufflevector %15, %13 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %17 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<2xi32>>
    %18 = llvm.shufflevector %17, %17 [0, 1, 0, 0] : vector<2xi32>
    %19 = llvm.shufflevector %18, %cst [0, 1, 6, 7] : vector<4xi32>
    %20 = llvm.extractvalue %0[1] : !llvm.array<4 x vector<2xi32>>
    %21 = llvm.shufflevector %20, %20 [0, 1, 0, 0] : vector<2xi32>
    %22 = llvm.shufflevector %21, %19 [4, 5, 0, 1] : vector<4xi32>
    %23 = arm_neon.intr.smmla %22, %10, %16 : vector<16xi8> to vector<4xi32>
    %24 = llvm.shufflevector %23, %23 [0, 1] : vector<4xi32>
    %25 = llvm.shufflevector %23, %23 [2, 3] : vector<4xi32>
    %26 = llvm.insertvalue %24, %2[0] : !llvm.array<4 x vector<2xi32>>
    %27 = llvm.insertvalue %25, %26[1] : !llvm.array<4 x vector<2xi32>>
    %28 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<8xi8>>
    %29 = llvm.shufflevector %28, %28 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %30 = llvm.shufflevector %29, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %31 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<8xi8>>
    %32 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %33 = llvm.shufflevector %32, %30 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %34 = llvm.extractvalue %4[0] : !llvm.array<2 x vector<8xi8>>
    %35 = llvm.shufflevector %34, %34 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %36 = llvm.shufflevector %35, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %37 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %38 = llvm.shufflevector %37, %37 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %39 = llvm.shufflevector %38, %36 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %40 = llvm.extractvalue %0[2] : !llvm.array<4 x vector<2xi32>>
    %41 = llvm.shufflevector %40, %40 [0, 1, 0, 0] : vector<2xi32>
    %42 = llvm.shufflevector %41, %cst [0, 1, 6, 7] : vector<4xi32>
    %43 = llvm.extractvalue %0[3] : !llvm.array<4 x vector<2xi32>>
    %44 = llvm.shufflevector %43, %43 [0, 1, 0, 0] : vector<2xi32>
    %45 = llvm.shufflevector %44, %42 [4, 5, 0, 1] : vector<4xi32>
    %46 = arm_neon.intr.smmla %45, %33, %39 : vector<16xi8> to vector<4xi32>
    %47 = llvm.shufflevector %46, %46 [0, 1] : vector<4xi32>
    %48 = llvm.shufflevector %46, %46 [2, 3] : vector<4xi32>
    %49 = llvm.insertvalue %47, %27[2] : !llvm.array<4 x vector<2xi32>>
    %50 = llvm.insertvalue %48, %49[3] : !llvm.array<4 x vector<2xi32>>
    %51 = builtin.unrealized_conversion_cast %50 : !llvm.array<4 x vector<2xi32>> to vector<4x2xi32>
    return %51 : vector<4x2xi32>
  }
  func.func @vector_arm_neon_unroll_incompatible_shape(%arg0: vector<4x12xi8>, %arg1: vector<4x12xi8>, %arg2: vector<4x4xi32>) -> vector<4x4xi32> {
    %cst = arith.constant dense<0> : vector<4x4xi32>
    %0 = builtin.unrealized_conversion_cast %cst : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %1 = arith.extsi %arg0 : vector<4x12xi8> to vector<4x12xi32>
    %2 = builtin.unrealized_conversion_cast %1 : vector<4x12xi32> to !llvm.array<4 x vector<12xi32>>
    %3 = arith.extsi %arg1 : vector<4x12xi8> to vector<4x12xi32>
    %4 = builtin.unrealized_conversion_cast %3 : vector<4x12xi32> to !llvm.array<4 x vector<12xi32>>
    %5 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<12xi32>>
    %6 = llvm.extractvalue %4[0] : !llvm.array<4 x vector<12xi32>>
    %7 = arith.muli %5, %6 : vector<12xi32>
    %8 = "llvm.intr.vector.reduce.add"(%7) : (vector<12xi32>) -> i32
    %9 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<4xi32>>
    %10 = llvm.mlir.constant(0 : i64) : i64
    %11 = llvm.insertelement %8, %9[%10 : i64] : vector<4xi32>
    %12 = llvm.insertvalue %11, %0[0] : !llvm.array<4 x vector<4xi32>>
    %13 = llvm.extractvalue %4[1] : !llvm.array<4 x vector<12xi32>>
    %14 = arith.muli %5, %13 : vector<12xi32>
    %15 = "llvm.intr.vector.reduce.add"(%14) : (vector<12xi32>) -> i32
    %16 = llvm.extractvalue %12[0] : !llvm.array<4 x vector<4xi32>>
    %17 = llvm.mlir.constant(1 : i64) : i64
    %18 = llvm.insertelement %15, %16[%17 : i64] : vector<4xi32>
    %19 = llvm.insertvalue %18, %12[0] : !llvm.array<4 x vector<4xi32>>
    %20 = llvm.extractvalue %4[2] : !llvm.array<4 x vector<12xi32>>
    %21 = arith.muli %5, %20 : vector<12xi32>
    %22 = "llvm.intr.vector.reduce.add"(%21) : (vector<12xi32>) -> i32
    %23 = llvm.extractvalue %19[0] : !llvm.array<4 x vector<4xi32>>
    %24 = llvm.mlir.constant(2 : i64) : i64
    %25 = llvm.insertelement %22, %23[%24 : i64] : vector<4xi32>
    %26 = llvm.insertvalue %25, %19[0] : !llvm.array<4 x vector<4xi32>>
    %27 = llvm.extractvalue %4[3] : !llvm.array<4 x vector<12xi32>>
    %28 = arith.muli %5, %27 : vector<12xi32>
    %29 = "llvm.intr.vector.reduce.add"(%28) : (vector<12xi32>) -> i32
    %30 = llvm.extractvalue %26[0] : !llvm.array<4 x vector<4xi32>>
    %31 = llvm.mlir.constant(3 : i64) : i64
    %32 = llvm.insertelement %29, %30[%31 : i64] : vector<4xi32>
    %33 = llvm.insertvalue %32, %26[0] : !llvm.array<4 x vector<4xi32>>
    %34 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<12xi32>>
    %35 = llvm.extractvalue %4[0] : !llvm.array<4 x vector<12xi32>>
    %36 = arith.muli %34, %35 : vector<12xi32>
    %37 = "llvm.intr.vector.reduce.add"(%36) : (vector<12xi32>) -> i32
    %38 = llvm.extractvalue %33[1] : !llvm.array<4 x vector<4xi32>>
    %39 = llvm.mlir.constant(0 : i64) : i64
    %40 = llvm.insertelement %37, %38[%39 : i64] : vector<4xi32>
    %41 = llvm.insertvalue %40, %33[1] : !llvm.array<4 x vector<4xi32>>
    %42 = llvm.extractvalue %4[1] : !llvm.array<4 x vector<12xi32>>
    %43 = arith.muli %34, %42 : vector<12xi32>
    %44 = "llvm.intr.vector.reduce.add"(%43) : (vector<12xi32>) -> i32
    %45 = llvm.extractvalue %41[1] : !llvm.array<4 x vector<4xi32>>
    %46 = llvm.mlir.constant(1 : i64) : i64
    %47 = llvm.insertelement %44, %45[%46 : i64] : vector<4xi32>
    %48 = llvm.insertvalue %47, %41[1] : !llvm.array<4 x vector<4xi32>>
    %49 = llvm.extractvalue %4[2] : !llvm.array<4 x vector<12xi32>>
    %50 = arith.muli %34, %49 : vector<12xi32>
    %51 = "llvm.intr.vector.reduce.add"(%50) : (vector<12xi32>) -> i32
    %52 = llvm.extractvalue %48[1] : !llvm.array<4 x vector<4xi32>>
    %53 = llvm.mlir.constant(2 : i64) : i64
    %54 = llvm.insertelement %51, %52[%53 : i64] : vector<4xi32>
    %55 = llvm.insertvalue %54, %48[1] : !llvm.array<4 x vector<4xi32>>
    %56 = llvm.extractvalue %4[3] : !llvm.array<4 x vector<12xi32>>
    %57 = arith.muli %34, %56 : vector<12xi32>
    %58 = "llvm.intr.vector.reduce.add"(%57) : (vector<12xi32>) -> i32
    %59 = llvm.extractvalue %55[1] : !llvm.array<4 x vector<4xi32>>
    %60 = llvm.mlir.constant(3 : i64) : i64
    %61 = llvm.insertelement %58, %59[%60 : i64] : vector<4xi32>
    %62 = llvm.insertvalue %61, %55[1] : !llvm.array<4 x vector<4xi32>>
    %63 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<12xi32>>
    %64 = llvm.extractvalue %4[0] : !llvm.array<4 x vector<12xi32>>
    %65 = arith.muli %63, %64 : vector<12xi32>
    %66 = "llvm.intr.vector.reduce.add"(%65) : (vector<12xi32>) -> i32
    %67 = llvm.extractvalue %62[2] : !llvm.array<4 x vector<4xi32>>
    %68 = llvm.mlir.constant(0 : i64) : i64
    %69 = llvm.insertelement %66, %67[%68 : i64] : vector<4xi32>
    %70 = llvm.insertvalue %69, %62[2] : !llvm.array<4 x vector<4xi32>>
    %71 = llvm.extractvalue %4[1] : !llvm.array<4 x vector<12xi32>>
    %72 = arith.muli %63, %71 : vector<12xi32>
    %73 = "llvm.intr.vector.reduce.add"(%72) : (vector<12xi32>) -> i32
    %74 = llvm.extractvalue %70[2] : !llvm.array<4 x vector<4xi32>>
    %75 = llvm.mlir.constant(1 : i64) : i64
    %76 = llvm.insertelement %73, %74[%75 : i64] : vector<4xi32>
    %77 = llvm.insertvalue %76, %70[2] : !llvm.array<4 x vector<4xi32>>
    %78 = llvm.extractvalue %4[2] : !llvm.array<4 x vector<12xi32>>
    %79 = arith.muli %63, %78 : vector<12xi32>
    %80 = "llvm.intr.vector.reduce.add"(%79) : (vector<12xi32>) -> i32
    %81 = llvm.extractvalue %77[2] : !llvm.array<4 x vector<4xi32>>
    %82 = llvm.mlir.constant(2 : i64) : i64
    %83 = llvm.insertelement %80, %81[%82 : i64] : vector<4xi32>
    %84 = llvm.insertvalue %83, %77[2] : !llvm.array<4 x vector<4xi32>>
    %85 = llvm.extractvalue %4[3] : !llvm.array<4 x vector<12xi32>>
    %86 = arith.muli %63, %85 : vector<12xi32>
    %87 = "llvm.intr.vector.reduce.add"(%86) : (vector<12xi32>) -> i32
    %88 = llvm.extractvalue %84[2] : !llvm.array<4 x vector<4xi32>>
    %89 = llvm.mlir.constant(3 : i64) : i64
    %90 = llvm.insertelement %87, %88[%89 : i64] : vector<4xi32>
    %91 = llvm.insertvalue %90, %84[2] : !llvm.array<4 x vector<4xi32>>
    %92 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<12xi32>>
    %93 = llvm.extractvalue %4[0] : !llvm.array<4 x vector<12xi32>>
    %94 = arith.muli %92, %93 : vector<12xi32>
    %95 = "llvm.intr.vector.reduce.add"(%94) : (vector<12xi32>) -> i32
    %96 = llvm.extractvalue %91[3] : !llvm.array<4 x vector<4xi32>>
    %97 = llvm.mlir.constant(0 : i64) : i64
    %98 = llvm.insertelement %95, %96[%97 : i64] : vector<4xi32>
    %99 = llvm.insertvalue %98, %91[3] : !llvm.array<4 x vector<4xi32>>
    %100 = llvm.extractvalue %4[1] : !llvm.array<4 x vector<12xi32>>
    %101 = arith.muli %92, %100 : vector<12xi32>
    %102 = "llvm.intr.vector.reduce.add"(%101) : (vector<12xi32>) -> i32
    %103 = llvm.extractvalue %99[3] : !llvm.array<4 x vector<4xi32>>
    %104 = llvm.mlir.constant(1 : i64) : i64
    %105 = llvm.insertelement %102, %103[%104 : i64] : vector<4xi32>
    %106 = llvm.insertvalue %105, %99[3] : !llvm.array<4 x vector<4xi32>>
    %107 = llvm.extractvalue %4[2] : !llvm.array<4 x vector<12xi32>>
    %108 = arith.muli %92, %107 : vector<12xi32>
    %109 = "llvm.intr.vector.reduce.add"(%108) : (vector<12xi32>) -> i32
    %110 = llvm.extractvalue %106[3] : !llvm.array<4 x vector<4xi32>>
    %111 = llvm.mlir.constant(2 : i64) : i64
    %112 = llvm.insertelement %109, %110[%111 : i64] : vector<4xi32>
    %113 = llvm.insertvalue %112, %106[3] : !llvm.array<4 x vector<4xi32>>
    %114 = llvm.extractvalue %4[3] : !llvm.array<4 x vector<12xi32>>
    %115 = arith.muli %92, %114 : vector<12xi32>
    %116 = "llvm.intr.vector.reduce.add"(%115) : (vector<12xi32>) -> i32
    %117 = llvm.extractvalue %113[3] : !llvm.array<4 x vector<4xi32>>
    %118 = llvm.mlir.constant(3 : i64) : i64
    %119 = llvm.insertelement %116, %117[%118 : i64] : vector<4xi32>
    %120 = llvm.insertvalue %119, %113[3] : !llvm.array<4 x vector<4xi32>>
    %121 = builtin.unrealized_conversion_cast %120 : !llvm.array<4 x vector<4xi32>> to vector<4x4xi32>
    %122 = arith.addi %121, %arg2 : vector<4x4xi32>
    return %122 : vector<4x4xi32>
  }
  func.func @vector_arm_neon_vecmat_unroll(%arg0: vector<8xi8>, %arg1: vector<8x8xi8>, %arg2: vector<8xi32>) -> vector<8xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<8x8xi8> to !llvm.array<8 x vector<8xi8>>
    %cst = arith.constant dense<0> : vector<4xi32>
    %cst_0 = arith.constant dense<0> : vector<16xi8>
    %cst_1 = arith.constant dense<0> : vector<2x2xi32>
    %1 = builtin.unrealized_conversion_cast %cst_1 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %cst_2 = arith.constant dense<0> : vector<2x8xi8>
    %2 = builtin.unrealized_conversion_cast %cst_2 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %cst_3 = arith.constant dense<0> : vector<8xi32>
    %3 = llvm.shufflevector %arg2, %arg2 [0, 1] : vector<8xi32>
    %4 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %5 = llvm.shufflevector %4, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %6 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>>
    %7 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %8 = llvm.shufflevector %7, %5 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %9 = llvm.extractvalue %0[0] : !llvm.array<8 x vector<8xi8>>
    %10 = llvm.shufflevector %9, %9 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %11 = llvm.shufflevector %10, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %12 = llvm.extractvalue %0[1] : !llvm.array<8 x vector<8xi8>>
    %13 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %14 = llvm.shufflevector %13, %11 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %15 = llvm.shufflevector %3, %3 [0, 1, 0, 0] : vector<2xi32>
    %16 = llvm.shufflevector %15, %cst [0, 1, 6, 7] : vector<4xi32>
    %17 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<2xi32>>
    %18 = llvm.shufflevector %17, %17 [0, 1, 0, 0] : vector<2xi32>
    %19 = llvm.shufflevector %18, %16 [4, 5, 0, 1] : vector<4xi32>
    %20 = arm_neon.intr.smmla %19, %8, %14 : vector<16xi8> to vector<4xi32>
    %21 = llvm.shufflevector %20, %20 [0, 1] : vector<4xi32>
    %22 = llvm.shufflevector %21, %21 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %23 = llvm.shufflevector %22, %cst_3 [0, 1, 10, 11, 12, 13, 14, 15] : vector<8xi32>
    %24 = llvm.shufflevector %arg2, %arg2 [2, 3] : vector<8xi32>
    %25 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %26 = llvm.shufflevector %25, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %27 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>>
    %28 = llvm.shufflevector %27, %27 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %29 = llvm.shufflevector %28, %26 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %30 = llvm.extractvalue %0[2] : !llvm.array<8 x vector<8xi8>>
    %31 = llvm.shufflevector %30, %30 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %32 = llvm.shufflevector %31, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %33 = llvm.extractvalue %0[3] : !llvm.array<8 x vector<8xi8>>
    %34 = llvm.shufflevector %33, %33 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %35 = llvm.shufflevector %34, %32 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %36 = llvm.shufflevector %24, %24 [0, 1, 0, 0] : vector<2xi32>
    %37 = llvm.shufflevector %36, %cst [0, 1, 6, 7] : vector<4xi32>
    %38 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<2xi32>>
    %39 = llvm.shufflevector %38, %38 [0, 1, 0, 0] : vector<2xi32>
    %40 = llvm.shufflevector %39, %37 [4, 5, 0, 1] : vector<4xi32>
    %41 = arm_neon.intr.smmla %40, %29, %35 : vector<16xi8> to vector<4xi32>
    %42 = llvm.shufflevector %41, %41 [0, 1] : vector<4xi32>
    %43 = llvm.shufflevector %42, %42 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %44 = llvm.shufflevector %43, %23 [8, 9, 0, 1, 12, 13, 14, 15] : vector<8xi32>
    %45 = llvm.shufflevector %arg2, %arg2 [4, 5] : vector<8xi32>
    %46 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %47 = llvm.shufflevector %46, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %48 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>>
    %49 = llvm.shufflevector %48, %48 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %50 = llvm.shufflevector %49, %47 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %51 = llvm.extractvalue %0[4] : !llvm.array<8 x vector<8xi8>>
    %52 = llvm.shufflevector %51, %51 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %53 = llvm.shufflevector %52, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %54 = llvm.extractvalue %0[5] : !llvm.array<8 x vector<8xi8>>
    %55 = llvm.shufflevector %54, %54 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %56 = llvm.shufflevector %55, %53 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %57 = llvm.shufflevector %45, %45 [0, 1, 0, 0] : vector<2xi32>
    %58 = llvm.shufflevector %57, %cst [0, 1, 6, 7] : vector<4xi32>
    %59 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<2xi32>>
    %60 = llvm.shufflevector %59, %59 [0, 1, 0, 0] : vector<2xi32>
    %61 = llvm.shufflevector %60, %58 [4, 5, 0, 1] : vector<4xi32>
    %62 = arm_neon.intr.smmla %61, %50, %56 : vector<16xi8> to vector<4xi32>
    %63 = llvm.shufflevector %62, %62 [0, 1] : vector<4xi32>
    %64 = llvm.shufflevector %63, %63 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %65 = llvm.shufflevector %64, %44 [8, 9, 10, 11, 0, 1, 14, 15] : vector<8xi32>
    %66 = llvm.shufflevector %arg2, %arg2 [6, 7] : vector<8xi32>
    %67 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %68 = llvm.shufflevector %67, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %69 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>>
    %70 = llvm.shufflevector %69, %69 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %71 = llvm.shufflevector %70, %68 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %72 = llvm.extractvalue %0[6] : !llvm.array<8 x vector<8xi8>>
    %73 = llvm.shufflevector %72, %72 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %74 = llvm.shufflevector %73, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %75 = llvm.extractvalue %0[7] : !llvm.array<8 x vector<8xi8>>
    %76 = llvm.shufflevector %75, %75 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %77 = llvm.shufflevector %76, %74 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %78 = llvm.shufflevector %66, %66 [0, 1, 0, 0] : vector<2xi32>
    %79 = llvm.shufflevector %78, %cst [0, 1, 6, 7] : vector<4xi32>
    %80 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<2xi32>>
    %81 = llvm.shufflevector %80, %80 [0, 1, 0, 0] : vector<2xi32>
    %82 = llvm.shufflevector %81, %79 [4, 5, 0, 1] : vector<4xi32>
    %83 = arm_neon.intr.smmla %82, %71, %77 : vector<16xi8> to vector<4xi32>
    %84 = llvm.shufflevector %83, %83 [0, 1] : vector<4xi32>
    %85 = llvm.shufflevector %84, %84 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %86 = llvm.shufflevector %85, %65 [8, 9, 10, 11, 12, 13, 0, 1] : vector<8xi32>
    return %86 : vector<8xi32>
  }
  func.func @vector_arm_neon_vecmat_unroll_leading_dim(%arg0: vector<1x8xi8>, %arg1: vector<8x8xi8>, %arg2: vector<1x8xi32>) -> vector<1x8xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<8x8xi8> to !llvm.array<8 x vector<8xi8>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<1x8xi8> to !llvm.array<1 x vector<8xi8>>
    %2 = builtin.unrealized_conversion_cast %arg2 : vector<1x8xi32> to !llvm.array<1 x vector<8xi32>>
    %cst = arith.constant dense<0> : vector<4xi32>
    %cst_0 = arith.constant dense<0> : vector<16xi8>
    %cst_1 = arith.constant dense<0> : vector<2x2xi32>
    %3 = builtin.unrealized_conversion_cast %cst_1 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %cst_2 = arith.constant dense<0> : vector<2x8xi8>
    %4 = builtin.unrealized_conversion_cast %cst_2 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %cst_3 = arith.constant dense<0> : vector<1x8xi32>
    %5 = builtin.unrealized_conversion_cast %cst_3 : vector<1x8xi32> to !llvm.array<1 x vector<8xi32>>
    %6 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>>
    %7 = llvm.shufflevector %6, %6 [0, 1] : vector<8xi32>
    %8 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>>
    %9 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %10 = llvm.shufflevector %9, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %11 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %13 = llvm.shufflevector %12, %10 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %14 = llvm.extractvalue %0[0] : !llvm.array<8 x vector<8xi8>>
    %15 = llvm.shufflevector %14, %14 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %16 = llvm.shufflevector %15, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %17 = llvm.extractvalue %0[1] : !llvm.array<8 x vector<8xi8>>
    %18 = llvm.shufflevector %17, %17 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %19 = llvm.shufflevector %18, %16 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %20 = llvm.shufflevector %7, %7 [0, 1, 0, 0] : vector<2xi32>
    %21 = llvm.shufflevector %20, %cst [0, 1, 6, 7] : vector<4xi32>
    %22 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<2xi32>>
    %23 = llvm.shufflevector %22, %22 [0, 1, 0, 0] : vector<2xi32>
    %24 = llvm.shufflevector %23, %21 [4, 5, 0, 1] : vector<4xi32>
    %25 = arm_neon.intr.smmla %24, %13, %19 : vector<16xi8> to vector<4xi32>
    %26 = llvm.shufflevector %25, %25 [0, 1] : vector<4xi32>
    %27 = llvm.extractvalue %5[0] : !llvm.array<1 x vector<8xi32>>
    %28 = llvm.shufflevector %26, %26 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %29 = llvm.shufflevector %28, %27 [0, 1, 10, 11, 12, 13, 14, 15] : vector<8xi32>
    %30 = llvm.insertvalue %29, %5[0] : !llvm.array<1 x vector<8xi32>>
    %31 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>>
    %32 = llvm.shufflevector %31, %31 [2, 3] : vector<8xi32>
    %33 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>>
    %34 = llvm.shufflevector %33, %33 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %35 = llvm.shufflevector %34, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %36 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %37 = llvm.shufflevector %36, %36 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %38 = llvm.shufflevector %37, %35 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %39 = llvm.extractvalue %0[2] : !llvm.array<8 x vector<8xi8>>
    %40 = llvm.shufflevector %39, %39 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %41 = llvm.shufflevector %40, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %42 = llvm.extractvalue %0[3] : !llvm.array<8 x vector<8xi8>>
    %43 = llvm.shufflevector %42, %42 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %44 = llvm.shufflevector %43, %41 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %45 = llvm.shufflevector %32, %32 [0, 1, 0, 0] : vector<2xi32>
    %46 = llvm.shufflevector %45, %cst [0, 1, 6, 7] : vector<4xi32>
    %47 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<2xi32>>
    %48 = llvm.shufflevector %47, %47 [0, 1, 0, 0] : vector<2xi32>
    %49 = llvm.shufflevector %48, %46 [4, 5, 0, 1] : vector<4xi32>
    %50 = arm_neon.intr.smmla %49, %38, %44 : vector<16xi8> to vector<4xi32>
    %51 = llvm.shufflevector %50, %50 [0, 1] : vector<4xi32>
    %52 = llvm.shufflevector %51, %51 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %53 = llvm.shufflevector %52, %29 [8, 9, 0, 1, 12, 13, 14, 15] : vector<8xi32>
    %54 = llvm.insertvalue %53, %30[0] : !llvm.array<1 x vector<8xi32>>
    %55 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>>
    %56 = llvm.shufflevector %55, %55 [4, 5] : vector<8xi32>
    %57 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>>
    %58 = llvm.shufflevector %57, %57 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %59 = llvm.shufflevector %58, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %60 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %61 = llvm.shufflevector %60, %60 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %62 = llvm.shufflevector %61, %59 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %63 = llvm.extractvalue %0[4] : !llvm.array<8 x vector<8xi8>>
    %64 = llvm.shufflevector %63, %63 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %65 = llvm.shufflevector %64, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %66 = llvm.extractvalue %0[5] : !llvm.array<8 x vector<8xi8>>
    %67 = llvm.shufflevector %66, %66 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %68 = llvm.shufflevector %67, %65 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %69 = llvm.shufflevector %56, %56 [0, 1, 0, 0] : vector<2xi32>
    %70 = llvm.shufflevector %69, %cst [0, 1, 6, 7] : vector<4xi32>
    %71 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<2xi32>>
    %72 = llvm.shufflevector %71, %71 [0, 1, 0, 0] : vector<2xi32>
    %73 = llvm.shufflevector %72, %70 [4, 5, 0, 1] : vector<4xi32>
    %74 = arm_neon.intr.smmla %73, %62, %68 : vector<16xi8> to vector<4xi32>
    %75 = llvm.shufflevector %74, %74 [0, 1] : vector<4xi32>
    %76 = llvm.shufflevector %75, %75 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %77 = llvm.shufflevector %76, %53 [8, 9, 10, 11, 0, 1, 14, 15] : vector<8xi32>
    %78 = llvm.insertvalue %77, %54[0] : !llvm.array<1 x vector<8xi32>>
    %79 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>>
    %80 = llvm.shufflevector %79, %79 [6, 7] : vector<8xi32>
    %81 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>>
    %82 = llvm.shufflevector %81, %81 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %83 = llvm.shufflevector %82, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %84 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<8xi8>>
    %85 = llvm.shufflevector %84, %84 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %86 = llvm.shufflevector %85, %83 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %87 = llvm.extractvalue %0[6] : !llvm.array<8 x vector<8xi8>>
    %88 = llvm.shufflevector %87, %87 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %89 = llvm.shufflevector %88, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %90 = llvm.extractvalue %0[7] : !llvm.array<8 x vector<8xi8>>
    %91 = llvm.shufflevector %90, %90 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %92 = llvm.shufflevector %91, %89 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %93 = llvm.shufflevector %80, %80 [0, 1, 0, 0] : vector<2xi32>
    %94 = llvm.shufflevector %93, %cst [0, 1, 6, 7] : vector<4xi32>
    %95 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<2xi32>>
    %96 = llvm.shufflevector %95, %95 [0, 1, 0, 0] : vector<2xi32>
    %97 = llvm.shufflevector %96, %94 [4, 5, 0, 1] : vector<4xi32>
    %98 = arm_neon.intr.smmla %97, %86, %92 : vector<16xi8> to vector<4xi32>
    %99 = llvm.shufflevector %98, %98 [0, 1] : vector<4xi32>
    %100 = llvm.shufflevector %99, %99 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32>
    %101 = llvm.shufflevector %100, %77 [8, 9, 10, 11, 12, 13, 0, 1] : vector<8xi32>
    %102 = llvm.insertvalue %101, %78[0] : !llvm.array<1 x vector<8xi32>>
    %103 = builtin.unrealized_conversion_cast %102 : !llvm.array<1 x vector<8xi32>> to vector<1x8xi32>
    return %103 : vector<1x8xi32>
  }
  func.func @vector_arm_neon_matvec(%arg0: vector<8x8xi8>, %arg1: vector<8xi8>, %arg2: vector<8xi32>) -> vector<8xi32> {
    %cst = arith.constant dense<0> : vector<8xi32>
    %0 = arith.extsi %arg1 : vector<8xi8> to vector<8xi32>
    %1 = arith.extsi %arg0 : vector<8x8xi8> to vector<8x8xi32>
    %2 = builtin.unrealized_conversion_cast %1 : vector<8x8xi32> to !llvm.array<8 x vector<8xi32>>
    %3 = llvm.extractvalue %2[0] : !llvm.array<8 x vector<8xi32>>
    %4 = arith.muli %3, %0 : vector<8xi32>
    %5 = "llvm.intr.vector.reduce.add"(%4) : (vector<8xi32>) -> i32
    %6 = llvm.mlir.constant(0 : i64) : i64
    %7 = llvm.insertelement %5, %cst[%6 : i64] : vector<8xi32>
    %8 = llvm.extractvalue %2[1] : !llvm.array<8 x vector<8xi32>>
    %9 = arith.muli %8, %0 : vector<8xi32>
    %10 = "llvm.intr.vector.reduce.add"(%9) : (vector<8xi32>) -> i32
    %11 = llvm.mlir.constant(1 : i64) : i64
    %12 = llvm.insertelement %10, %7[%11 : i64] : vector<8xi32>
    %13 = llvm.extractvalue %2[2] : !llvm.array<8 x vector<8xi32>>
    %14 = arith.muli %13, %0 : vector<8xi32>
    %15 = "llvm.intr.vector.reduce.add"(%14) : (vector<8xi32>) -> i32
    %16 = llvm.mlir.constant(2 : i64) : i64
    %17 = llvm.insertelement %15, %12[%16 : i64] : vector<8xi32>
    %18 = llvm.extractvalue %2[3] : !llvm.array<8 x vector<8xi32>>
    %19 = arith.muli %18, %0 : vector<8xi32>
    %20 = "llvm.intr.vector.reduce.add"(%19) : (vector<8xi32>) -> i32
    %21 = llvm.mlir.constant(3 : i64) : i64
    %22 = llvm.insertelement %20, %17[%21 : i64] : vector<8xi32>
    %23 = llvm.extractvalue %2[4] : !llvm.array<8 x vector<8xi32>>
    %24 = arith.muli %23, %0 : vector<8xi32>
    %25 = "llvm.intr.vector.reduce.add"(%24) : (vector<8xi32>) -> i32
    %26 = llvm.mlir.constant(4 : i64) : i64
    %27 = llvm.insertelement %25, %22[%26 : i64] : vector<8xi32>
    %28 = llvm.extractvalue %2[5] : !llvm.array<8 x vector<8xi32>>
    %29 = arith.muli %28, %0 : vector<8xi32>
    %30 = "llvm.intr.vector.reduce.add"(%29) : (vector<8xi32>) -> i32
    %31 = llvm.mlir.constant(5 : i64) : i64
    %32 = llvm.insertelement %30, %27[%31 : i64] : vector<8xi32>
    %33 = llvm.extractvalue %2[6] : !llvm.array<8 x vector<8xi32>>
    %34 = arith.muli %33, %0 : vector<8xi32>
    %35 = "llvm.intr.vector.reduce.add"(%34) : (vector<8xi32>) -> i32
    %36 = llvm.mlir.constant(6 : i64) : i64
    %37 = llvm.insertelement %35, %32[%36 : i64] : vector<8xi32>
    %38 = llvm.extractvalue %2[7] : !llvm.array<8 x vector<8xi32>>
    %39 = arith.muli %38, %0 : vector<8xi32>
    %40 = "llvm.intr.vector.reduce.add"(%39) : (vector<8xi32>) -> i32
    %41 = llvm.mlir.constant(7 : i64) : i64
    %42 = llvm.insertelement %40, %37[%41 : i64] : vector<8xi32>
    %43 = arith.addi %42, %arg2 : vector<8xi32>
    return %43 : vector<8xi32>
  }
  func.func @vector_arm_neon_k_unroll(%arg0: vector<2x16xi8>, %arg1: vector<2x16xi4>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<2x16xi8> to !llvm.array<2 x vector<16xi8>>
    %cst = arith.constant dense<0> : vector<2x2xi32>
    %2 = builtin.unrealized_conversion_cast %cst : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %cst_0 = arith.constant dense<0> : vector<4xi32>
    %cst_1 = arith.constant dense<0> : vector<16xi8>
    %3 = arith.extsi %arg1 : vector<2x16xi4> to vector<2x16xi8>
    %4 = builtin.unrealized_conversion_cast %3 : vector<2x16xi8> to !llvm.array<2 x vector<16xi8>>
    %5 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<16xi8>>
    %6 = llvm.shufflevector %5, %5 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %7 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<16xi8>>
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %9 = llvm.extractvalue %4[0] : !llvm.array<2 x vector<16xi8>>
    %10 = llvm.shufflevector %9, %9 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %11 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<16xi8>>
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %13 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %14 = llvm.shufflevector %13, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %15 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %16 = llvm.shufflevector %15, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %17 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %18 = llvm.shufflevector %17, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %19 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %20 = llvm.shufflevector %19, %18 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %21 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<2xi32>>
    %22 = llvm.shufflevector %21, %21 [0, 1, 0, 0] : vector<2xi32>
    %23 = llvm.shufflevector %22, %cst_0 [0, 1, 6, 7] : vector<4xi32>
    %24 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<2xi32>>
    %25 = llvm.shufflevector %24, %24 [0, 1, 0, 0] : vector<2xi32>
    %26 = llvm.shufflevector %25, %23 [4, 5, 0, 1] : vector<4xi32>
    %27 = arm_neon.intr.smmla %26, %16, %20 : vector<16xi8> to vector<4xi32>
    %28 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<16xi8>>
    %29 = llvm.shufflevector %28, %28 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8>
    %30 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<16xi8>>
    %31 = llvm.shufflevector %30, %30 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8>
    %32 = llvm.extractvalue %4[0] : !llvm.array<2 x vector<16xi8>>
    %33 = llvm.shufflevector %32, %32 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8>
    %34 = llvm.extractvalue %4[1] : !llvm.array<2 x vector<16xi8>>
    %35 = llvm.shufflevector %34, %34 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8>
    %36 = llvm.shufflevector %29, %29 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %37 = llvm.shufflevector %36, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %38 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %39 = llvm.shufflevector %38, %37 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %40 = llvm.shufflevector %33, %33 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %41 = llvm.shufflevector %40, %cst_1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %42 = llvm.shufflevector %35, %35 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %43 = llvm.shufflevector %42, %41 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %44 = arm_neon.intr.smmla %27, %39, %43 : vector<16xi8> to vector<4xi32>
    %45 = llvm.shufflevector %44, %44 [0, 1] : vector<4xi32>
    %46 = llvm.insertvalue %45, %2[0] : !llvm.array<2 x vector<2xi32>>
    %47 = llvm.shufflevector %44, %44 [2, 3] : vector<4xi32>
    %48 = llvm.insertvalue %47, %46[1] : !llvm.array<2 x vector<2xi32>>
    %49 = builtin.unrealized_conversion_cast %48 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %49 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_k_unroll_vecmat(%arg0: vector<1x32xi8>, %arg1: vector<2x32xi4>, %arg2: vector<1x2xi32>) -> vector<1x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<1x2xi32> to !llvm.array<1 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<1x32xi8> to !llvm.array<1 x vector<32xi8>>
    %cst = arith.constant dense<0> : vector<4xi32>
    %cst_0 = arith.constant dense<0> : vector<16xi8>
    %cst_1 = arith.constant dense<0> : vector<2x2xi32>
    %2 = builtin.unrealized_conversion_cast %cst_1 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %cst_2 = arith.constant dense<0> : vector<2x8xi8>
    %3 = builtin.unrealized_conversion_cast %cst_2 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %cst_3 = arith.constant dense<0> : vector<1x2xi32>
    %4 = builtin.unrealized_conversion_cast %cst_3 : vector<1x2xi32> to !llvm.array<1 x vector<2xi32>>
    %5 = arith.extsi %arg1 : vector<2x32xi4> to vector<2x32xi8>
    %6 = builtin.unrealized_conversion_cast %5 : vector<2x32xi8> to !llvm.array<2 x vector<32xi8>>
    %7 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<32xi8>>
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8>
    %9 = llvm.extractvalue %6[0] : !llvm.array<2 x vector<32xi8>>
    %10 = llvm.shufflevector %9, %9 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8>
    %11 = llvm.extractvalue %6[1] : !llvm.array<2 x vector<32xi8>>
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8>
    %13 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %14 = llvm.shufflevector %13, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %15 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>>
    %16 = llvm.shufflevector %15, %15 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %17 = llvm.shufflevector %16, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %18 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %19 = llvm.shufflevector %18, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %20 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %21 = llvm.shufflevector %20, %19 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %22 = llvm.extractvalue %0[0] : !llvm.array<1 x vector<2xi32>>
    %23 = llvm.shufflevector %22, %22 [0, 1, 0, 0] : vector<2xi32>
    %24 = llvm.shufflevector %23, %cst [0, 1, 6, 7] : vector<4xi32>
    %25 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<2xi32>>
    %26 = llvm.shufflevector %25, %25 [0, 1, 0, 0] : vector<2xi32>
    %27 = llvm.shufflevector %26, %24 [4, 5, 0, 1] : vector<4xi32>
    %28 = arm_neon.intr.smmla %27, %17, %21 : vector<16xi8> to vector<4xi32>
    %29 = llvm.shufflevector %28, %28 [0, 1] : vector<4xi32>
    %30 = llvm.insertvalue %29, %4[0] : !llvm.array<1 x vector<2xi32>>
    %31 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<32xi8>>
    %32 = llvm.shufflevector %31, %31 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8>
    %33 = llvm.extractvalue %6[0] : !llvm.array<2 x vector<32xi8>>
    %34 = llvm.shufflevector %33, %33 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8>
    %35 = llvm.extractvalue %6[1] : !llvm.array<2 x vector<32xi8>>
    %36 = llvm.shufflevector %35, %35 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8>
    %37 = llvm.shufflevector %32, %32 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %38 = llvm.shufflevector %37, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %39 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>>
    %40 = llvm.shufflevector %39, %39 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %41 = llvm.shufflevector %40, %38 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %42 = llvm.shufflevector %34, %34 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %43 = llvm.shufflevector %42, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %44 = llvm.shufflevector %36, %36 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %45 = llvm.shufflevector %44, %43 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %46 = arm_neon.intr.smmla %28, %41, %45 : vector<16xi8> to vector<4xi32>
    %47 = llvm.shufflevector %46, %46 [0, 1] : vector<4xi32>
    %48 = llvm.insertvalue %47, %30[0] : !llvm.array<1 x vector<2xi32>>
    %49 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<32xi8>>
    %50 = llvm.shufflevector %49, %49 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8>
    %51 = llvm.extractvalue %6[0] : !llvm.array<2 x vector<32xi8>>
    %52 = llvm.shufflevector %51, %51 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8>
    %53 = llvm.extractvalue %6[1] : !llvm.array<2 x vector<32xi8>>
    %54 = llvm.shufflevector %53, %53 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8>
    %55 = llvm.shufflevector %50, %50 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %56 = llvm.shufflevector %55, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %57 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>>
    %58 = llvm.shufflevector %57, %57 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %59 = llvm.shufflevector %58, %56 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %60 = llvm.shufflevector %52, %52 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %61 = llvm.shufflevector %60, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %62 = llvm.shufflevector %54, %54 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %63 = llvm.shufflevector %62, %61 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %64 = arm_neon.intr.smmla %46, %59, %63 : vector<16xi8> to vector<4xi32>
    %65 = llvm.shufflevector %64, %64 [0, 1] : vector<4xi32>
    %66 = llvm.insertvalue %65, %48[0] : !llvm.array<1 x vector<2xi32>>
    %67 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<32xi8>>
    %68 = llvm.shufflevector %67, %67 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8>
    %69 = llvm.extractvalue %6[0] : !llvm.array<2 x vector<32xi8>>
    %70 = llvm.shufflevector %69, %69 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8>
    %71 = llvm.extractvalue %6[1] : !llvm.array<2 x vector<32xi8>>
    %72 = llvm.shufflevector %71, %71 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8>
    %73 = llvm.shufflevector %68, %68 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %74 = llvm.shufflevector %73, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %75 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>>
    %76 = llvm.shufflevector %75, %75 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %77 = llvm.shufflevector %76, %74 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %78 = llvm.shufflevector %70, %70 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %79 = llvm.shufflevector %78, %cst_0 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8>
    %80 = llvm.shufflevector %72, %72 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8>
    %81 = llvm.shufflevector %80, %79 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8>
    %82 = arm_neon.intr.smmla %64, %77, %81 : vector<16xi8> to vector<4xi32>
    %83 = llvm.shufflevector %82, %82 [0, 1] : vector<4xi32>
    %84 = llvm.insertvalue %83, %66[0] : !llvm.array<1 x vector<2xi32>>
    %85 = builtin.unrealized_conversion_cast %84 : !llvm.array<1 x vector<2xi32>> to vector<1x2xi32>
    return %85 : vector<1x2xi32>
  }
}
