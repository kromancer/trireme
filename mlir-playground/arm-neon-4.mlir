module {
  llvm.func @vector_arm_neon_mixed_types(%arg0: !llvm.array<2 x vector<8xi8>>, %arg1: !llvm.array<2 x vector<8xi4>>, %arg2: !llvm.array<2 x vector<2xi32>>) -> !llvm.array<2 x vector<2xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %1 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %2 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %3 = llvm.extractvalue %arg1[0] : !llvm.array<2 x vector<8xi4>> 
    %4 = llvm.sext %3 : vector<8xi4> to vector<8xi8>
    %5 = llvm.extractvalue %arg1[1] : !llvm.array<2 x vector<8xi4>> 
    %6 = llvm.sext %5 : vector<8xi4> to vector<8xi8>
    %7 = llvm.extractvalue %arg0[0] : !llvm.array<2 x vector<8xi8>> 
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %9 = llvm.shufflevector %8, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %10 = llvm.extractvalue %arg0[1] : !llvm.array<2 x vector<8xi8>> 
    %11 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %12 = llvm.shufflevector %11, %9 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %13 = llvm.shufflevector %4, %4 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %14 = llvm.shufflevector %13, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %15 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %16 = llvm.shufflevector %15, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %17 = llvm.extractvalue %arg2[0] : !llvm.array<2 x vector<2xi32>> 
    %18 = llvm.shufflevector %17, %17 [0, 1, 0, 0] : vector<2xi32> 
    %19 = llvm.shufflevector %18, %1 [0, 1, 6, 7] : vector<4xi32> 
    %20 = llvm.extractvalue %arg2[1] : !llvm.array<2 x vector<2xi32>> 
    %21 = llvm.shufflevector %20, %20 [0, 1, 0, 0] : vector<2xi32> 
    %22 = llvm.shufflevector %21, %19 [4, 5, 0, 1] : vector<4xi32> 
    %23 = arm_neon.intr.smmla %22, %12, %16 : vector<16xi8> to vector<4xi32>
    %24 = llvm.shufflevector %23, %23 [0, 1] : vector<4xi32> 
    %25 = llvm.insertvalue %24, %0[0] : !llvm.array<2 x vector<2xi32>> 
    %26 = llvm.shufflevector %23, %23 [2, 3] : vector<4xi32> 
    %27 = llvm.insertvalue %26, %25[1] : !llvm.array<2 x vector<2xi32>> 
    llvm.return %27 : !llvm.array<2 x vector<2xi32>>
  }
  llvm.func @vector_arm_neon_same_types(%arg0: !llvm.array<2 x vector<8xi8>>, %arg1: !llvm.array<2 x vector<8xi8>>, %arg2: !llvm.array<2 x vector<2xi32>>) -> !llvm.array<2 x vector<2xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %1 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %2 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %3 = llvm.extractvalue %arg0[0] : !llvm.array<2 x vector<8xi8>> 
    %4 = llvm.shufflevector %3, %3 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %5 = llvm.shufflevector %4, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %6 = llvm.extractvalue %arg0[1] : !llvm.array<2 x vector<8xi8>> 
    %7 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %8 = llvm.shufflevector %7, %5 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %9 = llvm.extractvalue %arg1[0] : !llvm.array<2 x vector<8xi8>> 
    %10 = llvm.shufflevector %9, %9 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %11 = llvm.shufflevector %10, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %12 = llvm.extractvalue %arg1[1] : !llvm.array<2 x vector<8xi8>> 
    %13 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %14 = llvm.shufflevector %13, %11 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %15 = llvm.extractvalue %arg2[0] : !llvm.array<2 x vector<2xi32>> 
    %16 = llvm.shufflevector %15, %15 [0, 1, 0, 0] : vector<2xi32> 
    %17 = llvm.shufflevector %16, %1 [0, 1, 6, 7] : vector<4xi32> 
    %18 = llvm.extractvalue %arg2[1] : !llvm.array<2 x vector<2xi32>> 
    %19 = llvm.shufflevector %18, %18 [0, 1, 0, 0] : vector<2xi32> 
    %20 = llvm.shufflevector %19, %17 [4, 5, 0, 1] : vector<4xi32> 
    %21 = arm_neon.intr.smmla %20, %8, %14 : vector<16xi8> to vector<4xi32>
    %22 = llvm.shufflevector %21, %21 [0, 1] : vector<4xi32> 
    %23 = llvm.insertvalue %22, %0[0] : !llvm.array<2 x vector<2xi32>> 
    %24 = llvm.shufflevector %21, %21 [2, 3] : vector<4xi32> 
    %25 = llvm.insertvalue %24, %23[1] : !llvm.array<2 x vector<2xi32>> 
    llvm.return %25 : !llvm.array<2 x vector<2xi32>>
  }
  llvm.func @vector_arm_neon_without_extsi(%arg0: !llvm.array<2 x vector<8xi32>>, %arg1: !llvm.array<2 x vector<8xi32>>, %arg2: !llvm.array<2 x vector<2xi32>>) -> !llvm.array<2 x vector<2xi32>> {
    %0 = llvm.mlir.undef : !llvm.array<2 x vector<2xi32>>
    %1 = llvm.mlir.constant(1 : i64) : i64
    %2 = llvm.mlir.constant(0 : i64) : i64
    %3 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %4 = llvm.extractvalue %arg0[0] : !llvm.array<2 x vector<8xi32>> 
    %5 = llvm.extractvalue %arg1[0] : !llvm.array<2 x vector<8xi32>> 
    %6 = llvm.mul %4, %5 : vector<8xi32>
    %7 = "llvm.intr.vector.reduce.add"(%6) : (vector<8xi32>) -> i32
    %8 = llvm.extractvalue %3[0] : !llvm.array<2 x vector<2xi32>> 
    %9 = llvm.insertelement %7, %8[%2 : i64] : vector<2xi32>
    %10 = llvm.extractvalue %arg1[1] : !llvm.array<2 x vector<8xi32>> 
    %11 = llvm.mul %4, %10 : vector<8xi32>
    %12 = "llvm.intr.vector.reduce.add"(%11) : (vector<8xi32>) -> i32
    %13 = llvm.insertelement %12, %9[%1 : i64] : vector<2xi32>
    %14 = llvm.extractvalue %arg0[1] : !llvm.array<2 x vector<8xi32>> 
    %15 = llvm.mul %14, %5 : vector<8xi32>
    %16 = "llvm.intr.vector.reduce.add"(%15) : (vector<8xi32>) -> i32
    %17 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<2xi32>> 
    %18 = llvm.insertelement %16, %17[%2 : i64] : vector<2xi32>
    %19 = llvm.mul %14, %10 : vector<8xi32>
    %20 = "llvm.intr.vector.reduce.add"(%19) : (vector<8xi32>) -> i32
    %21 = llvm.insertelement %20, %18[%1 : i64] : vector<2xi32>
    %22 = llvm.extractvalue %arg2[0] : !llvm.array<2 x vector<2xi32>> 
    %23 = llvm.add %13, %22 : vector<2xi32>
    %24 = llvm.insertvalue %23, %0[0] : !llvm.array<2 x vector<2xi32>> 
    %25 = llvm.extractvalue %arg2[1] : !llvm.array<2 x vector<2xi32>> 
    %26 = llvm.add %21, %25 : vector<2xi32>
    %27 = llvm.insertvalue %26, %24[1] : !llvm.array<2 x vector<2xi32>> 
    llvm.return %27 : !llvm.array<2 x vector<2xi32>>
  }
  llvm.func @vector_arm_neon_unroll(%arg0: !llvm.array<4 x vector<8xi8>>, %arg1: !llvm.array<4 x vector<8xi8>>, %arg2: !llvm.array<4 x vector<4xi32>>) -> !llvm.array<4 x vector<4xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %1 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %2 = llvm.mlir.constant(dense<0> : vector<4x4xi32>) : !llvm.array<4 x vector<4xi32>>
    %3 = llvm.extractvalue %arg2[0] : !llvm.array<4 x vector<4xi32>> 
    %4 = llvm.shufflevector %3, %3 [0, 1] : vector<4xi32> 
    %5 = llvm.extractvalue %arg2[1] : !llvm.array<4 x vector<4xi32>> 
    %6 = llvm.shufflevector %5, %5 [0, 1] : vector<4xi32> 
    %7 = llvm.extractvalue %arg0[0] : !llvm.array<4 x vector<8xi8>> 
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %9 = llvm.shufflevector %8, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %10 = llvm.extractvalue %arg0[1] : !llvm.array<4 x vector<8xi8>> 
    %11 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %12 = llvm.shufflevector %11, %9 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %13 = llvm.extractvalue %arg1[0] : !llvm.array<4 x vector<8xi8>> 
    %14 = llvm.shufflevector %13, %13 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %15 = llvm.shufflevector %14, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %16 = llvm.extractvalue %arg1[1] : !llvm.array<4 x vector<8xi8>> 
    %17 = llvm.shufflevector %16, %16 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %18 = llvm.shufflevector %17, %15 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %19 = llvm.shufflevector %4, %4 [0, 1, 0, 0] : vector<2xi32> 
    %20 = llvm.shufflevector %19, %0 [0, 1, 6, 7] : vector<4xi32> 
    %21 = llvm.shufflevector %6, %6 [0, 1, 0, 0] : vector<2xi32> 
    %22 = llvm.shufflevector %21, %20 [4, 5, 0, 1] : vector<4xi32> 
    %23 = arm_neon.intr.smmla %22, %12, %18 : vector<16xi8> to vector<4xi32>
    %24 = llvm.shufflevector %23, %23 [0, 1] : vector<4xi32> 
    %25 = llvm.shufflevector %23, %23 [2, 3] : vector<4xi32> 
    %26 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<4xi32>> 
    %27 = llvm.shufflevector %24, %24 [0, 1, 0, 0] : vector<2xi32> 
    %28 = llvm.shufflevector %27, %26 [0, 1, 6, 7] : vector<4xi32> 
    %29 = llvm.insertvalue %28, %2[0] : !llvm.array<4 x vector<4xi32>> 
    %30 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<4xi32>> 
    %31 = llvm.shufflevector %25, %25 [0, 1, 0, 0] : vector<2xi32> 
    %32 = llvm.shufflevector %31, %30 [0, 1, 6, 7] : vector<4xi32> 
    %33 = llvm.insertvalue %32, %29[1] : !llvm.array<4 x vector<4xi32>> 
    %34 = llvm.shufflevector %3, %3 [2, 3] : vector<4xi32> 
    %35 = llvm.shufflevector %5, %5 [2, 3] : vector<4xi32> 
    %36 = llvm.extractvalue %arg1[2] : !llvm.array<4 x vector<8xi8>> 
    %37 = llvm.shufflevector %36, %36 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %38 = llvm.shufflevector %37, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %39 = llvm.extractvalue %arg1[3] : !llvm.array<4 x vector<8xi8>> 
    %40 = llvm.shufflevector %39, %39 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %41 = llvm.shufflevector %40, %38 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %42 = llvm.shufflevector %34, %34 [0, 1, 0, 0] : vector<2xi32> 
    %43 = llvm.shufflevector %42, %0 [0, 1, 6, 7] : vector<4xi32> 
    %44 = llvm.shufflevector %35, %35 [0, 1, 0, 0] : vector<2xi32> 
    %45 = llvm.shufflevector %44, %43 [4, 5, 0, 1] : vector<4xi32> 
    %46 = arm_neon.intr.smmla %45, %12, %41 : vector<16xi8> to vector<4xi32>
    %47 = llvm.shufflevector %46, %46 [0, 1] : vector<4xi32> 
    %48 = llvm.shufflevector %46, %46 [2, 3] : vector<4xi32> 
    %49 = llvm.shufflevector %47, %47 [0, 1, 0, 0] : vector<2xi32> 
    %50 = llvm.shufflevector %49, %28 [4, 5, 0, 1] : vector<4xi32> 
    %51 = llvm.insertvalue %50, %33[0] : !llvm.array<4 x vector<4xi32>> 
    %52 = llvm.shufflevector %48, %48 [0, 1, 0, 0] : vector<2xi32> 
    %53 = llvm.shufflevector %52, %32 [4, 5, 0, 1] : vector<4xi32> 
    %54 = llvm.insertvalue %53, %51[1] : !llvm.array<4 x vector<4xi32>> 
    %55 = llvm.extractvalue %arg2[2] : !llvm.array<4 x vector<4xi32>> 
    %56 = llvm.shufflevector %55, %55 [0, 1] : vector<4xi32> 
    %57 = llvm.extractvalue %arg2[3] : !llvm.array<4 x vector<4xi32>> 
    %58 = llvm.shufflevector %57, %57 [0, 1] : vector<4xi32> 
    %59 = llvm.extractvalue %arg0[2] : !llvm.array<4 x vector<8xi8>> 
    %60 = llvm.shufflevector %59, %59 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %61 = llvm.shufflevector %60, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %62 = llvm.extractvalue %arg0[3] : !llvm.array<4 x vector<8xi8>> 
    %63 = llvm.shufflevector %62, %62 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %64 = llvm.shufflevector %63, %61 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %65 = llvm.shufflevector %56, %56 [0, 1, 0, 0] : vector<2xi32> 
    %66 = llvm.shufflevector %65, %0 [0, 1, 6, 7] : vector<4xi32> 
    %67 = llvm.shufflevector %58, %58 [0, 1, 0, 0] : vector<2xi32> 
    %68 = llvm.shufflevector %67, %66 [4, 5, 0, 1] : vector<4xi32> 
    %69 = arm_neon.intr.smmla %68, %64, %18 : vector<16xi8> to vector<4xi32>
    %70 = llvm.shufflevector %69, %69 [0, 1] : vector<4xi32> 
    %71 = llvm.shufflevector %69, %69 [2, 3] : vector<4xi32> 
    %72 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<4xi32>> 
    %73 = llvm.shufflevector %70, %70 [0, 1, 0, 0] : vector<2xi32> 
    %74 = llvm.shufflevector %73, %72 [0, 1, 6, 7] : vector<4xi32> 
    %75 = llvm.insertvalue %74, %54[2] : !llvm.array<4 x vector<4xi32>> 
    %76 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<4xi32>> 
    %77 = llvm.shufflevector %71, %71 [0, 1, 0, 0] : vector<2xi32> 
    %78 = llvm.shufflevector %77, %76 [0, 1, 6, 7] : vector<4xi32> 
    %79 = llvm.insertvalue %78, %75[3] : !llvm.array<4 x vector<4xi32>> 
    %80 = llvm.shufflevector %55, %55 [2, 3] : vector<4xi32> 
    %81 = llvm.shufflevector %57, %57 [2, 3] : vector<4xi32> 
    %82 = llvm.shufflevector %80, %80 [0, 1, 0, 0] : vector<2xi32> 
    %83 = llvm.shufflevector %82, %0 [0, 1, 6, 7] : vector<4xi32> 
    %84 = llvm.shufflevector %81, %81 [0, 1, 0, 0] : vector<2xi32> 
    %85 = llvm.shufflevector %84, %83 [4, 5, 0, 1] : vector<4xi32> 
    %86 = arm_neon.intr.smmla %85, %64, %41 : vector<16xi8> to vector<4xi32>
    %87 = llvm.shufflevector %86, %86 [0, 1] : vector<4xi32> 
    %88 = llvm.shufflevector %86, %86 [2, 3] : vector<4xi32> 
    %89 = llvm.shufflevector %87, %87 [0, 1, 0, 0] : vector<2xi32> 
    %90 = llvm.shufflevector %89, %74 [4, 5, 0, 1] : vector<4xi32> 
    %91 = llvm.insertvalue %90, %79[2] : !llvm.array<4 x vector<4xi32>> 
    %92 = llvm.shufflevector %88, %88 [0, 1, 0, 0] : vector<2xi32> 
    %93 = llvm.shufflevector %92, %78 [4, 5, 0, 1] : vector<4xi32> 
    %94 = llvm.insertvalue %93, %91[3] : !llvm.array<4 x vector<4xi32>> 
    llvm.return %94 : !llvm.array<4 x vector<4xi32>>
  }
  llvm.func @vector_arm_neon_mixed_unroll(%arg0: !llvm.array<4 x vector<8xi8>>, %arg1: !llvm.array<2 x vector<8xi4>>, %arg2: !llvm.array<4 x vector<2xi32>>) -> !llvm.array<4 x vector<2xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %1 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %2 = llvm.mlir.constant(dense<0> : vector<4x2xi32>) : !llvm.array<4 x vector<2xi32>>
    %3 = llvm.extractvalue %arg1[0] : !llvm.array<2 x vector<8xi4>> 
    %4 = llvm.sext %3 : vector<8xi4> to vector<8xi8>
    %5 = llvm.extractvalue %arg1[1] : !llvm.array<2 x vector<8xi4>> 
    %6 = llvm.sext %5 : vector<8xi4> to vector<8xi8>
    %7 = llvm.extractvalue %arg0[0] : !llvm.array<4 x vector<8xi8>> 
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %9 = llvm.shufflevector %8, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %10 = llvm.extractvalue %arg0[1] : !llvm.array<4 x vector<8xi8>> 
    %11 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %12 = llvm.shufflevector %11, %9 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %13 = llvm.shufflevector %4, %4 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %14 = llvm.shufflevector %13, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %15 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %16 = llvm.shufflevector %15, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %17 = llvm.extractvalue %arg2[0] : !llvm.array<4 x vector<2xi32>> 
    %18 = llvm.shufflevector %17, %17 [0, 1, 0, 0] : vector<2xi32> 
    %19 = llvm.shufflevector %18, %0 [0, 1, 6, 7] : vector<4xi32> 
    %20 = llvm.extractvalue %arg2[1] : !llvm.array<4 x vector<2xi32>> 
    %21 = llvm.shufflevector %20, %20 [0, 1, 0, 0] : vector<2xi32> 
    %22 = llvm.shufflevector %21, %19 [4, 5, 0, 1] : vector<4xi32> 
    %23 = arm_neon.intr.smmla %22, %12, %16 : vector<16xi8> to vector<4xi32>
    %24 = llvm.shufflevector %23, %23 [0, 1] : vector<4xi32> 
    %25 = llvm.shufflevector %23, %23 [2, 3] : vector<4xi32> 
    %26 = llvm.insertvalue %24, %2[0] : !llvm.array<4 x vector<2xi32>> 
    %27 = llvm.insertvalue %25, %26[1] : !llvm.array<4 x vector<2xi32>> 
    %28 = llvm.extractvalue %arg0[2] : !llvm.array<4 x vector<8xi8>> 
    %29 = llvm.shufflevector %28, %28 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %30 = llvm.shufflevector %29, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %31 = llvm.extractvalue %arg0[3] : !llvm.array<4 x vector<8xi8>> 
    %32 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %33 = llvm.shufflevector %32, %30 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %34 = llvm.extractvalue %arg2[2] : !llvm.array<4 x vector<2xi32>> 
    %35 = llvm.shufflevector %34, %34 [0, 1, 0, 0] : vector<2xi32> 
    %36 = llvm.shufflevector %35, %0 [0, 1, 6, 7] : vector<4xi32> 
    %37 = llvm.extractvalue %arg2[3] : !llvm.array<4 x vector<2xi32>> 
    %38 = llvm.shufflevector %37, %37 [0, 1, 0, 0] : vector<2xi32> 
    %39 = llvm.shufflevector %38, %36 [4, 5, 0, 1] : vector<4xi32> 
    %40 = arm_neon.intr.smmla %39, %33, %16 : vector<16xi8> to vector<4xi32>
    %41 = llvm.shufflevector %40, %40 [0, 1] : vector<4xi32> 
    %42 = llvm.shufflevector %40, %40 [2, 3] : vector<4xi32> 
    %43 = llvm.insertvalue %41, %27[2] : !llvm.array<4 x vector<2xi32>> 
    %44 = llvm.insertvalue %42, %43[3] : !llvm.array<4 x vector<2xi32>> 
    llvm.return %44 : !llvm.array<4 x vector<2xi32>>
  }
  llvm.func @vector_arm_neon_unroll_incompatible_shape(%arg0: !llvm.array<4 x vector<12xi8>>, %arg1: !llvm.array<4 x vector<12xi8>>, %arg2: !llvm.array<4 x vector<4xi32>>) -> !llvm.array<4 x vector<4xi32>> {
    %0 = llvm.mlir.undef : !llvm.array<4 x vector<4xi32>>
    %1 = llvm.mlir.constant(3 : i64) : i64
    %2 = llvm.mlir.constant(2 : i64) : i64
    %3 = llvm.mlir.constant(1 : i64) : i64
    %4 = llvm.mlir.constant(0 : i64) : i64
    %5 = llvm.mlir.constant(dense<0> : vector<4x4xi32>) : !llvm.array<4 x vector<4xi32>>
    %6 = llvm.extractvalue %arg0[0] : !llvm.array<4 x vector<12xi8>> 
    %7 = llvm.sext %6 : vector<12xi8> to vector<12xi32>
    %8 = llvm.extractvalue %arg0[1] : !llvm.array<4 x vector<12xi8>> 
    %9 = llvm.sext %8 : vector<12xi8> to vector<12xi32>
    %10 = llvm.extractvalue %arg0[2] : !llvm.array<4 x vector<12xi8>> 
    %11 = llvm.sext %10 : vector<12xi8> to vector<12xi32>
    %12 = llvm.extractvalue %arg0[3] : !llvm.array<4 x vector<12xi8>> 
    %13 = llvm.sext %12 : vector<12xi8> to vector<12xi32>
    %14 = llvm.extractvalue %arg1[0] : !llvm.array<4 x vector<12xi8>> 
    %15 = llvm.sext %14 : vector<12xi8> to vector<12xi32>
    %16 = llvm.extractvalue %arg1[1] : !llvm.array<4 x vector<12xi8>> 
    %17 = llvm.sext %16 : vector<12xi8> to vector<12xi32>
    %18 = llvm.extractvalue %arg1[2] : !llvm.array<4 x vector<12xi8>> 
    %19 = llvm.sext %18 : vector<12xi8> to vector<12xi32>
    %20 = llvm.extractvalue %arg1[3] : !llvm.array<4 x vector<12xi8>> 
    %21 = llvm.sext %20 : vector<12xi8> to vector<12xi32>
    %22 = llvm.mul %7, %15 : vector<12xi32>
    %23 = "llvm.intr.vector.reduce.add"(%22) : (vector<12xi32>) -> i32
    %24 = llvm.extractvalue %5[0] : !llvm.array<4 x vector<4xi32>> 
    %25 = llvm.insertelement %23, %24[%4 : i64] : vector<4xi32>
    %26 = llvm.mul %7, %17 : vector<12xi32>
    %27 = "llvm.intr.vector.reduce.add"(%26) : (vector<12xi32>) -> i32
    %28 = llvm.insertelement %27, %25[%3 : i64] : vector<4xi32>
    %29 = llvm.mul %7, %19 : vector<12xi32>
    %30 = "llvm.intr.vector.reduce.add"(%29) : (vector<12xi32>) -> i32
    %31 = llvm.insertelement %30, %28[%2 : i64] : vector<4xi32>
    %32 = llvm.mul %7, %21 : vector<12xi32>
    %33 = "llvm.intr.vector.reduce.add"(%32) : (vector<12xi32>) -> i32
    %34 = llvm.insertelement %33, %31[%1 : i64] : vector<4xi32>
    %35 = llvm.mul %9, %15 : vector<12xi32>
    %36 = "llvm.intr.vector.reduce.add"(%35) : (vector<12xi32>) -> i32
    %37 = llvm.extractvalue %5[1] : !llvm.array<4 x vector<4xi32>> 
    %38 = llvm.insertelement %36, %37[%4 : i64] : vector<4xi32>
    %39 = llvm.mul %9, %17 : vector<12xi32>
    %40 = "llvm.intr.vector.reduce.add"(%39) : (vector<12xi32>) -> i32
    %41 = llvm.insertelement %40, %38[%3 : i64] : vector<4xi32>
    %42 = llvm.mul %9, %19 : vector<12xi32>
    %43 = "llvm.intr.vector.reduce.add"(%42) : (vector<12xi32>) -> i32
    %44 = llvm.insertelement %43, %41[%2 : i64] : vector<4xi32>
    %45 = llvm.mul %9, %21 : vector<12xi32>
    %46 = "llvm.intr.vector.reduce.add"(%45) : (vector<12xi32>) -> i32
    %47 = llvm.insertelement %46, %44[%1 : i64] : vector<4xi32>
    %48 = llvm.mul %11, %15 : vector<12xi32>
    %49 = "llvm.intr.vector.reduce.add"(%48) : (vector<12xi32>) -> i32
    %50 = llvm.extractvalue %5[2] : !llvm.array<4 x vector<4xi32>> 
    %51 = llvm.insertelement %49, %50[%4 : i64] : vector<4xi32>
    %52 = llvm.mul %11, %17 : vector<12xi32>
    %53 = "llvm.intr.vector.reduce.add"(%52) : (vector<12xi32>) -> i32
    %54 = llvm.insertelement %53, %51[%3 : i64] : vector<4xi32>
    %55 = llvm.mul %11, %19 : vector<12xi32>
    %56 = "llvm.intr.vector.reduce.add"(%55) : (vector<12xi32>) -> i32
    %57 = llvm.insertelement %56, %54[%2 : i64] : vector<4xi32>
    %58 = llvm.mul %11, %21 : vector<12xi32>
    %59 = "llvm.intr.vector.reduce.add"(%58) : (vector<12xi32>) -> i32
    %60 = llvm.insertelement %59, %57[%1 : i64] : vector<4xi32>
    %61 = llvm.mul %13, %15 : vector<12xi32>
    %62 = "llvm.intr.vector.reduce.add"(%61) : (vector<12xi32>) -> i32
    %63 = llvm.extractvalue %5[3] : !llvm.array<4 x vector<4xi32>> 
    %64 = llvm.insertelement %62, %63[%4 : i64] : vector<4xi32>
    %65 = llvm.mul %13, %17 : vector<12xi32>
    %66 = "llvm.intr.vector.reduce.add"(%65) : (vector<12xi32>) -> i32
    %67 = llvm.insertelement %66, %64[%3 : i64] : vector<4xi32>
    %68 = llvm.mul %13, %19 : vector<12xi32>
    %69 = "llvm.intr.vector.reduce.add"(%68) : (vector<12xi32>) -> i32
    %70 = llvm.insertelement %69, %67[%2 : i64] : vector<4xi32>
    %71 = llvm.mul %13, %21 : vector<12xi32>
    %72 = "llvm.intr.vector.reduce.add"(%71) : (vector<12xi32>) -> i32
    %73 = llvm.insertelement %72, %70[%1 : i64] : vector<4xi32>
    %74 = llvm.extractvalue %arg2[0] : !llvm.array<4 x vector<4xi32>> 
    %75 = llvm.add %34, %74 : vector<4xi32>
    %76 = llvm.insertvalue %75, %0[0] : !llvm.array<4 x vector<4xi32>> 
    %77 = llvm.extractvalue %arg2[1] : !llvm.array<4 x vector<4xi32>> 
    %78 = llvm.add %47, %77 : vector<4xi32>
    %79 = llvm.insertvalue %78, %76[1] : !llvm.array<4 x vector<4xi32>> 
    %80 = llvm.extractvalue %arg2[2] : !llvm.array<4 x vector<4xi32>> 
    %81 = llvm.add %60, %80 : vector<4xi32>
    %82 = llvm.insertvalue %81, %79[2] : !llvm.array<4 x vector<4xi32>> 
    %83 = llvm.extractvalue %arg2[3] : !llvm.array<4 x vector<4xi32>> 
    %84 = llvm.add %73, %83 : vector<4xi32>
    %85 = llvm.insertvalue %84, %82[3] : !llvm.array<4 x vector<4xi32>> 
    llvm.return %85 : !llvm.array<4 x vector<4xi32>>
  }
  llvm.func @vector_arm_neon_vecmat_unroll(%arg0: vector<8xi8>, %arg1: !llvm.array<8 x vector<8xi8>>, %arg2: vector<8xi32>) -> vector<8xi32> {
    %0 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %1 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %2 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x8xi8>) : !llvm.array<2 x vector<8xi8>>
    %4 = llvm.mlir.constant(dense<0> : vector<8xi32>) : vector<8xi32>
    %5 = llvm.shufflevector %arg2, %arg2 [0, 1] : vector<8xi32> 
    %6 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %7 = llvm.shufflevector %6, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %8 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>> 
    %9 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %10 = llvm.shufflevector %9, %7 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %11 = llvm.extractvalue %arg1[0] : !llvm.array<8 x vector<8xi8>> 
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %13 = llvm.shufflevector %12, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %14 = llvm.extractvalue %arg1[1] : !llvm.array<8 x vector<8xi8>> 
    %15 = llvm.shufflevector %14, %14 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %16 = llvm.shufflevector %15, %13 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %17 = llvm.shufflevector %5, %5 [0, 1, 0, 0] : vector<2xi32> 
    %18 = llvm.shufflevector %17, %0 [0, 1, 6, 7] : vector<4xi32> 
    %19 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<2xi32>> 
    %20 = llvm.shufflevector %19, %19 [0, 1, 0, 0] : vector<2xi32> 
    %21 = llvm.shufflevector %20, %18 [4, 5, 0, 1] : vector<4xi32> 
    %22 = arm_neon.intr.smmla %21, %10, %16 : vector<16xi8> to vector<4xi32>
    %23 = llvm.shufflevector %22, %22 [0, 1] : vector<4xi32> 
    %24 = llvm.shufflevector %23, %23 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %25 = llvm.shufflevector %24, %4 [0, 1, 10, 11, 12, 13, 14, 15] : vector<8xi32> 
    %26 = llvm.shufflevector %arg2, %arg2 [2, 3] : vector<8xi32> 
    %27 = llvm.extractvalue %arg1[2] : !llvm.array<8 x vector<8xi8>> 
    %28 = llvm.shufflevector %27, %27 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %29 = llvm.shufflevector %28, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %30 = llvm.extractvalue %arg1[3] : !llvm.array<8 x vector<8xi8>> 
    %31 = llvm.shufflevector %30, %30 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %32 = llvm.shufflevector %31, %29 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %33 = llvm.shufflevector %26, %26 [0, 1, 0, 0] : vector<2xi32> 
    %34 = llvm.shufflevector %33, %0 [0, 1, 6, 7] : vector<4xi32> 
    %35 = llvm.shufflevector %20, %34 [4, 5, 0, 1] : vector<4xi32> 
    %36 = arm_neon.intr.smmla %35, %10, %32 : vector<16xi8> to vector<4xi32>
    %37 = llvm.shufflevector %36, %36 [0, 1] : vector<4xi32> 
    %38 = llvm.shufflevector %37, %37 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %39 = llvm.shufflevector %38, %25 [8, 9, 0, 1, 12, 13, 14, 15] : vector<8xi32> 
    %40 = llvm.shufflevector %arg2, %arg2 [4, 5] : vector<8xi32> 
    %41 = llvm.extractvalue %arg1[4] : !llvm.array<8 x vector<8xi8>> 
    %42 = llvm.shufflevector %41, %41 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %43 = llvm.shufflevector %42, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %44 = llvm.extractvalue %arg1[5] : !llvm.array<8 x vector<8xi8>> 
    %45 = llvm.shufflevector %44, %44 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %46 = llvm.shufflevector %45, %43 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %47 = llvm.shufflevector %40, %40 [0, 1, 0, 0] : vector<2xi32> 
    %48 = llvm.shufflevector %47, %0 [0, 1, 6, 7] : vector<4xi32> 
    %49 = llvm.shufflevector %20, %48 [4, 5, 0, 1] : vector<4xi32> 
    %50 = arm_neon.intr.smmla %49, %10, %46 : vector<16xi8> to vector<4xi32>
    %51 = llvm.shufflevector %50, %50 [0, 1] : vector<4xi32> 
    %52 = llvm.shufflevector %51, %51 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %53 = llvm.shufflevector %52, %39 [8, 9, 10, 11, 0, 1, 14, 15] : vector<8xi32> 
    %54 = llvm.shufflevector %arg2, %arg2 [6, 7] : vector<8xi32> 
    %55 = llvm.extractvalue %arg1[6] : !llvm.array<8 x vector<8xi8>> 
    %56 = llvm.shufflevector %55, %55 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %57 = llvm.shufflevector %56, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %58 = llvm.extractvalue %arg1[7] : !llvm.array<8 x vector<8xi8>> 
    %59 = llvm.shufflevector %58, %58 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %60 = llvm.shufflevector %59, %57 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %61 = llvm.shufflevector %54, %54 [0, 1, 0, 0] : vector<2xi32> 
    %62 = llvm.shufflevector %61, %0 [0, 1, 6, 7] : vector<4xi32> 
    %63 = llvm.shufflevector %20, %62 [4, 5, 0, 1] : vector<4xi32> 
    %64 = arm_neon.intr.smmla %63, %10, %60 : vector<16xi8> to vector<4xi32>
    %65 = llvm.shufflevector %64, %64 [0, 1] : vector<4xi32> 
    %66 = llvm.shufflevector %65, %65 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %67 = llvm.shufflevector %66, %53 [8, 9, 10, 11, 12, 13, 0, 1] : vector<8xi32> 
    llvm.return %67 : vector<8xi32>
  }
  llvm.func @vector_arm_neon_vecmat_unroll_leading_dim(%arg0: !llvm.array<1 x vector<8xi8>>, %arg1: !llvm.array<8 x vector<8xi8>>, %arg2: !llvm.array<1 x vector<8xi32>>) -> !llvm.array<1 x vector<8xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %1 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %2 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x8xi8>) : !llvm.array<2 x vector<8xi8>>
    %4 = llvm.mlir.constant(dense<0> : vector<1x8xi32>) : !llvm.array<1 x vector<8xi32>>
    %5 = llvm.extractvalue %arg2[0] : !llvm.array<1 x vector<8xi32>> 
    %6 = llvm.shufflevector %5, %5 [0, 1] : vector<8xi32> 
    %7 = llvm.extractvalue %arg0[0] : !llvm.array<1 x vector<8xi8>> 
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %9 = llvm.shufflevector %8, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %10 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>> 
    %11 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %12 = llvm.shufflevector %11, %9 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %13 = llvm.extractvalue %arg1[0] : !llvm.array<8 x vector<8xi8>> 
    %14 = llvm.shufflevector %13, %13 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %15 = llvm.shufflevector %14, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %16 = llvm.extractvalue %arg1[1] : !llvm.array<8 x vector<8xi8>> 
    %17 = llvm.shufflevector %16, %16 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %18 = llvm.shufflevector %17, %15 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %19 = llvm.shufflevector %6, %6 [0, 1, 0, 0] : vector<2xi32> 
    %20 = llvm.shufflevector %19, %0 [0, 1, 6, 7] : vector<4xi32> 
    %21 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<2xi32>> 
    %22 = llvm.shufflevector %21, %21 [0, 1, 0, 0] : vector<2xi32> 
    %23 = llvm.shufflevector %22, %20 [4, 5, 0, 1] : vector<4xi32> 
    %24 = arm_neon.intr.smmla %23, %12, %18 : vector<16xi8> to vector<4xi32>
    %25 = llvm.shufflevector %24, %24 [0, 1] : vector<4xi32> 
    %26 = llvm.extractvalue %4[0] : !llvm.array<1 x vector<8xi32>> 
    %27 = llvm.shufflevector %25, %25 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %28 = llvm.shufflevector %27, %26 [0, 1, 10, 11, 12, 13, 14, 15] : vector<8xi32> 
    %29 = llvm.insertvalue %28, %4[0] : !llvm.array<1 x vector<8xi32>> 
    %30 = llvm.shufflevector %5, %5 [2, 3] : vector<8xi32> 
    %31 = llvm.extractvalue %arg1[2] : !llvm.array<8 x vector<8xi8>> 
    %32 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %33 = llvm.shufflevector %32, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %34 = llvm.extractvalue %arg1[3] : !llvm.array<8 x vector<8xi8>> 
    %35 = llvm.shufflevector %34, %34 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %36 = llvm.shufflevector %35, %33 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %37 = llvm.shufflevector %30, %30 [0, 1, 0, 0] : vector<2xi32> 
    %38 = llvm.shufflevector %37, %0 [0, 1, 6, 7] : vector<4xi32> 
    %39 = llvm.shufflevector %22, %38 [4, 5, 0, 1] : vector<4xi32> 
    %40 = arm_neon.intr.smmla %39, %12, %36 : vector<16xi8> to vector<4xi32>
    %41 = llvm.shufflevector %40, %40 [0, 1] : vector<4xi32> 
    %42 = llvm.shufflevector %41, %41 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %43 = llvm.shufflevector %42, %28 [8, 9, 0, 1, 12, 13, 14, 15] : vector<8xi32> 
    %44 = llvm.insertvalue %43, %29[0] : !llvm.array<1 x vector<8xi32>> 
    %45 = llvm.shufflevector %5, %5 [4, 5] : vector<8xi32> 
    %46 = llvm.extractvalue %arg1[4] : !llvm.array<8 x vector<8xi8>> 
    %47 = llvm.shufflevector %46, %46 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %48 = llvm.shufflevector %47, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %49 = llvm.extractvalue %arg1[5] : !llvm.array<8 x vector<8xi8>> 
    %50 = llvm.shufflevector %49, %49 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %51 = llvm.shufflevector %50, %48 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %52 = llvm.shufflevector %45, %45 [0, 1, 0, 0] : vector<2xi32> 
    %53 = llvm.shufflevector %52, %0 [0, 1, 6, 7] : vector<4xi32> 
    %54 = llvm.shufflevector %22, %53 [4, 5, 0, 1] : vector<4xi32> 
    %55 = arm_neon.intr.smmla %54, %12, %51 : vector<16xi8> to vector<4xi32>
    %56 = llvm.shufflevector %55, %55 [0, 1] : vector<4xi32> 
    %57 = llvm.shufflevector %56, %56 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %58 = llvm.shufflevector %57, %43 [8, 9, 10, 11, 0, 1, 14, 15] : vector<8xi32> 
    %59 = llvm.insertvalue %58, %44[0] : !llvm.array<1 x vector<8xi32>> 
    %60 = llvm.shufflevector %5, %5 [6, 7] : vector<8xi32> 
    %61 = llvm.extractvalue %arg1[6] : !llvm.array<8 x vector<8xi8>> 
    %62 = llvm.shufflevector %61, %61 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %63 = llvm.shufflevector %62, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %64 = llvm.extractvalue %arg1[7] : !llvm.array<8 x vector<8xi8>> 
    %65 = llvm.shufflevector %64, %64 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %66 = llvm.shufflevector %65, %63 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %67 = llvm.shufflevector %60, %60 [0, 1, 0, 0] : vector<2xi32> 
    %68 = llvm.shufflevector %67, %0 [0, 1, 6, 7] : vector<4xi32> 
    %69 = llvm.shufflevector %22, %68 [4, 5, 0, 1] : vector<4xi32> 
    %70 = arm_neon.intr.smmla %69, %12, %66 : vector<16xi8> to vector<4xi32>
    %71 = llvm.shufflevector %70, %70 [0, 1] : vector<4xi32> 
    %72 = llvm.shufflevector %71, %71 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %73 = llvm.shufflevector %72, %58 [8, 9, 10, 11, 12, 13, 0, 1] : vector<8xi32> 
    %74 = llvm.insertvalue %73, %59[0] : !llvm.array<1 x vector<8xi32>> 
    llvm.return %74 : !llvm.array<1 x vector<8xi32>>
  }
  llvm.func @vector_arm_neon_matvec(%arg0: !llvm.array<8 x vector<8xi8>>, %arg1: vector<8xi8>, %arg2: vector<8xi32>) -> vector<8xi32> {
    %0 = llvm.mlir.constant(7 : i64) : i64
    %1 = llvm.mlir.constant(6 : i64) : i64
    %2 = llvm.mlir.constant(5 : i64) : i64
    %3 = llvm.mlir.constant(4 : i64) : i64
    %4 = llvm.mlir.constant(3 : i64) : i64
    %5 = llvm.mlir.constant(2 : i64) : i64
    %6 = llvm.mlir.constant(1 : i64) : i64
    %7 = llvm.mlir.constant(0 : i64) : i64
    %8 = llvm.mlir.constant(dense<0> : vector<8xi32>) : vector<8xi32>
    %9 = llvm.sext %arg1 : vector<8xi8> to vector<8xi32>
    %10 = llvm.extractvalue %arg0[0] : !llvm.array<8 x vector<8xi8>> 
    %11 = llvm.sext %10 : vector<8xi8> to vector<8xi32>
    %12 = llvm.extractvalue %arg0[1] : !llvm.array<8 x vector<8xi8>> 
    %13 = llvm.sext %12 : vector<8xi8> to vector<8xi32>
    %14 = llvm.extractvalue %arg0[2] : !llvm.array<8 x vector<8xi8>> 
    %15 = llvm.sext %14 : vector<8xi8> to vector<8xi32>
    %16 = llvm.extractvalue %arg0[3] : !llvm.array<8 x vector<8xi8>> 
    %17 = llvm.sext %16 : vector<8xi8> to vector<8xi32>
    %18 = llvm.extractvalue %arg0[4] : !llvm.array<8 x vector<8xi8>> 
    %19 = llvm.sext %18 : vector<8xi8> to vector<8xi32>
    %20 = llvm.extractvalue %arg0[5] : !llvm.array<8 x vector<8xi8>> 
    %21 = llvm.sext %20 : vector<8xi8> to vector<8xi32>
    %22 = llvm.extractvalue %arg0[6] : !llvm.array<8 x vector<8xi8>> 
    %23 = llvm.sext %22 : vector<8xi8> to vector<8xi32>
    %24 = llvm.extractvalue %arg0[7] : !llvm.array<8 x vector<8xi8>> 
    %25 = llvm.sext %24 : vector<8xi8> to vector<8xi32>
    %26 = llvm.mul %11, %9 : vector<8xi32>
    %27 = "llvm.intr.vector.reduce.add"(%26) : (vector<8xi32>) -> i32
    %28 = llvm.insertelement %27, %8[%7 : i64] : vector<8xi32>
    %29 = llvm.mul %13, %9 : vector<8xi32>
    %30 = "llvm.intr.vector.reduce.add"(%29) : (vector<8xi32>) -> i32
    %31 = llvm.insertelement %30, %28[%6 : i64] : vector<8xi32>
    %32 = llvm.mul %15, %9 : vector<8xi32>
    %33 = "llvm.intr.vector.reduce.add"(%32) : (vector<8xi32>) -> i32
    %34 = llvm.insertelement %33, %31[%5 : i64] : vector<8xi32>
    %35 = llvm.mul %17, %9 : vector<8xi32>
    %36 = "llvm.intr.vector.reduce.add"(%35) : (vector<8xi32>) -> i32
    %37 = llvm.insertelement %36, %34[%4 : i64] : vector<8xi32>
    %38 = llvm.mul %19, %9 : vector<8xi32>
    %39 = "llvm.intr.vector.reduce.add"(%38) : (vector<8xi32>) -> i32
    %40 = llvm.insertelement %39, %37[%3 : i64] : vector<8xi32>
    %41 = llvm.mul %21, %9 : vector<8xi32>
    %42 = "llvm.intr.vector.reduce.add"(%41) : (vector<8xi32>) -> i32
    %43 = llvm.insertelement %42, %40[%2 : i64] : vector<8xi32>
    %44 = llvm.mul %23, %9 : vector<8xi32>
    %45 = "llvm.intr.vector.reduce.add"(%44) : (vector<8xi32>) -> i32
    %46 = llvm.insertelement %45, %43[%1 : i64] : vector<8xi32>
    %47 = llvm.mul %25, %9 : vector<8xi32>
    %48 = "llvm.intr.vector.reduce.add"(%47) : (vector<8xi32>) -> i32
    %49 = llvm.insertelement %48, %46[%0 : i64] : vector<8xi32>
    %50 = llvm.add %49, %arg2 : vector<8xi32>
    llvm.return %50 : vector<8xi32>
  }
  llvm.func @vector_arm_neon_k_unroll(%arg0: !llvm.array<2 x vector<16xi8>>, %arg1: !llvm.array<2 x vector<16xi4>>, %arg2: !llvm.array<2 x vector<2xi32>>) -> !llvm.array<2 x vector<2xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %1 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %2 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %3 = llvm.extractvalue %arg1[0] : !llvm.array<2 x vector<16xi4>> 
    %4 = llvm.sext %3 : vector<16xi4> to vector<16xi8>
    %5 = llvm.extractvalue %arg1[1] : !llvm.array<2 x vector<16xi4>> 
    %6 = llvm.sext %5 : vector<16xi4> to vector<16xi8>
    %7 = llvm.extractvalue %arg0[0] : !llvm.array<2 x vector<16xi8>> 
    %8 = llvm.shufflevector %7, %7 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %9 = llvm.extractvalue %arg0[1] : !llvm.array<2 x vector<16xi8>> 
    %10 = llvm.shufflevector %9, %9 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %11 = llvm.shufflevector %4, %4 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %12 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %13 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %14 = llvm.shufflevector %13, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %15 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %16 = llvm.shufflevector %15, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %17 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %18 = llvm.shufflevector %17, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %19 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %20 = llvm.shufflevector %19, %18 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %21 = llvm.extractvalue %arg2[0] : !llvm.array<2 x vector<2xi32>> 
    %22 = llvm.shufflevector %21, %21 [0, 1, 0, 0] : vector<2xi32> 
    %23 = llvm.shufflevector %22, %1 [0, 1, 6, 7] : vector<4xi32> 
    %24 = llvm.extractvalue %arg2[1] : !llvm.array<2 x vector<2xi32>> 
    %25 = llvm.shufflevector %24, %24 [0, 1, 0, 0] : vector<2xi32> 
    %26 = llvm.shufflevector %25, %23 [4, 5, 0, 1] : vector<4xi32> 
    %27 = arm_neon.intr.smmla %26, %16, %20 : vector<16xi8> to vector<4xi32>
    %28 = llvm.shufflevector %7, %7 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %29 = llvm.shufflevector %9, %9 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %30 = llvm.shufflevector %4, %4 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %31 = llvm.shufflevector %6, %6 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %32 = llvm.shufflevector %28, %28 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %33 = llvm.shufflevector %32, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %34 = llvm.shufflevector %29, %29 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %35 = llvm.shufflevector %34, %33 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %36 = llvm.shufflevector %30, %30 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %37 = llvm.shufflevector %36, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %38 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %39 = llvm.shufflevector %38, %37 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %40 = arm_neon.intr.smmla %27, %35, %39 : vector<16xi8> to vector<4xi32>
    %41 = llvm.shufflevector %40, %40 [0, 1] : vector<4xi32> 
    %42 = llvm.insertvalue %41, %0[0] : !llvm.array<2 x vector<2xi32>> 
    %43 = llvm.shufflevector %40, %40 [2, 3] : vector<4xi32> 
    %44 = llvm.insertvalue %43, %42[1] : !llvm.array<2 x vector<2xi32>> 
    llvm.return %44 : !llvm.array<2 x vector<2xi32>>
  }
  llvm.func @vector_arm_neon_k_unroll_vecmat(%arg0: !llvm.array<1 x vector<32xi8>>, %arg1: !llvm.array<2 x vector<32xi4>>, %arg2: !llvm.array<1 x vector<2xi32>>) -> !llvm.array<1 x vector<2xi32>> {
    %0 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %1 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %2 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x8xi8>) : !llvm.array<2 x vector<8xi8>>
    %4 = llvm.mlir.constant(dense<0> : vector<1x2xi32>) : !llvm.array<1 x vector<2xi32>>
    %5 = llvm.extractvalue %arg1[0] : !llvm.array<2 x vector<32xi4>> 
    %6 = llvm.sext %5 : vector<32xi4> to vector<32xi8>
    %7 = llvm.extractvalue %arg1[1] : !llvm.array<2 x vector<32xi4>> 
    %8 = llvm.sext %7 : vector<32xi4> to vector<32xi8>
    %9 = llvm.extractvalue %arg0[0] : !llvm.array<1 x vector<32xi8>> 
    %10 = llvm.shufflevector %9, %9 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8> 
    %11 = llvm.shufflevector %6, %6 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8> 
    %12 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8> 
    %13 = llvm.shufflevector %10, %10 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %14 = llvm.shufflevector %13, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %15 = llvm.extractvalue %3[1] : !llvm.array<2 x vector<8xi8>> 
    %16 = llvm.shufflevector %15, %15 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %17 = llvm.shufflevector %16, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %18 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %19 = llvm.shufflevector %18, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %20 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %21 = llvm.shufflevector %20, %19 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %22 = llvm.extractvalue %arg2[0] : !llvm.array<1 x vector<2xi32>> 
    %23 = llvm.shufflevector %22, %22 [0, 1, 0, 0] : vector<2xi32> 
    %24 = llvm.shufflevector %23, %0 [0, 1, 6, 7] : vector<4xi32> 
    %25 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<2xi32>> 
    %26 = llvm.shufflevector %25, %25 [0, 1, 0, 0] : vector<2xi32> 
    %27 = llvm.shufflevector %26, %24 [4, 5, 0, 1] : vector<4xi32> 
    %28 = arm_neon.intr.smmla %27, %17, %21 : vector<16xi8> to vector<4xi32>
    %29 = llvm.shufflevector %28, %28 [0, 1] : vector<4xi32> 
    %30 = llvm.insertvalue %29, %4[0] : !llvm.array<1 x vector<2xi32>> 
    %31 = llvm.shufflevector %9, %9 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8> 
    %32 = llvm.shufflevector %6, %6 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8> 
    %33 = llvm.shufflevector %8, %8 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8> 
    %34 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %35 = llvm.shufflevector %34, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %36 = llvm.shufflevector %16, %35 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %37 = llvm.shufflevector %32, %32 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %38 = llvm.shufflevector %37, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %39 = llvm.shufflevector %33, %33 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %40 = llvm.shufflevector %39, %38 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %41 = arm_neon.intr.smmla %28, %36, %40 : vector<16xi8> to vector<4xi32>
    %42 = llvm.shufflevector %41, %41 [0, 1] : vector<4xi32> 
    %43 = llvm.insertvalue %42, %30[0] : !llvm.array<1 x vector<2xi32>> 
    %44 = llvm.shufflevector %9, %9 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8> 
    %45 = llvm.shufflevector %6, %6 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8> 
    %46 = llvm.shufflevector %8, %8 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8> 
    %47 = llvm.shufflevector %44, %44 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %48 = llvm.shufflevector %47, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %49 = llvm.shufflevector %16, %48 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %50 = llvm.shufflevector %45, %45 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %51 = llvm.shufflevector %50, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %52 = llvm.shufflevector %46, %46 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %53 = llvm.shufflevector %52, %51 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %54 = arm_neon.intr.smmla %41, %49, %53 : vector<16xi8> to vector<4xi32>
    %55 = llvm.shufflevector %54, %54 [0, 1] : vector<4xi32> 
    %56 = llvm.insertvalue %55, %43[0] : !llvm.array<1 x vector<2xi32>> 
    %57 = llvm.shufflevector %9, %9 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8> 
    %58 = llvm.shufflevector %6, %6 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8> 
    %59 = llvm.shufflevector %8, %8 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8> 
    %60 = llvm.shufflevector %57, %57 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %61 = llvm.shufflevector %60, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %62 = llvm.shufflevector %16, %61 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %63 = llvm.shufflevector %58, %58 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %64 = llvm.shufflevector %63, %1 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %65 = llvm.shufflevector %59, %59 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %66 = llvm.shufflevector %65, %64 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %67 = arm_neon.intr.smmla %54, %62, %66 : vector<16xi8> to vector<4xi32>
    %68 = llvm.shufflevector %67, %67 [0, 1] : vector<4xi32> 
    %69 = llvm.insertvalue %68, %56[0] : !llvm.array<1 x vector<2xi32>> 
    llvm.return %69 : !llvm.array<1 x vector<2xi32>>
  }
}

