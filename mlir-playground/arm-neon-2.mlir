module {
  func.func @vector_arm_neon_mixed_types(%arg0: vector<2x8xi8>, %arg1: vector<2x8xi4>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<2x8xi4> to !llvm.array<2 x vector<8xi4>>
    %1 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %4 = builtin.unrealized_conversion_cast %3 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %5 = builtin.unrealized_conversion_cast %4 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %6 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %7 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %8 = llvm.mlir.undef : !llvm.array<2 x vector<8xi8>>
    %9 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<8xi4>> 
    %10 = llvm.sext %9 : vector<8xi4> to vector<8xi8>
    %11 = llvm.insertvalue %10, %8[0] : !llvm.array<2 x vector<8xi8>> 
    %12 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<8xi4>> 
    %13 = llvm.sext %12 : vector<8xi4> to vector<8xi8>
    %14 = llvm.insertvalue %13, %11[1] : !llvm.array<2 x vector<8xi8>> 
    %15 = builtin.unrealized_conversion_cast %14 : !llvm.array<2 x vector<8xi8>> to vector<2x8xi8>
    %16 = builtin.unrealized_conversion_cast %15 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %17 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<8xi8>> 
    %18 = llvm.shufflevector %17, %17 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %19 = llvm.shufflevector %18, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %20 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>> 
    %21 = llvm.shufflevector %20, %20 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %22 = llvm.shufflevector %21, %19 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %23 = llvm.extractvalue %16[0] : !llvm.array<2 x vector<8xi8>> 
    %24 = llvm.shufflevector %23, %23 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %25 = llvm.shufflevector %24, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %26 = llvm.extractvalue %16[1] : !llvm.array<2 x vector<8xi8>> 
    %27 = llvm.shufflevector %26, %26 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %28 = llvm.shufflevector %27, %25 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %29 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<2xi32>> 
    %30 = llvm.shufflevector %29, %29 [0, 1, 0, 0] : vector<2xi32> 
    %31 = llvm.shufflevector %30, %6 [0, 1, 6, 7] : vector<4xi32> 
    %32 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<2xi32>> 
    %33 = llvm.shufflevector %32, %32 [0, 1, 0, 0] : vector<2xi32> 
    %34 = llvm.shufflevector %33, %31 [4, 5, 0, 1] : vector<4xi32> 
    %35 = arm_neon.intr.smmla %34, %22, %28 : vector<16xi8> to vector<4xi32>
    %36 = llvm.shufflevector %35, %35 [0, 1] : vector<4xi32> 
    %37 = llvm.insertvalue %36, %5[0] : !llvm.array<2 x vector<2xi32>> 
    %38 = llvm.shufflevector %35, %35 [2, 3] : vector<4xi32> 
    %39 = llvm.insertvalue %38, %37[1] : !llvm.array<2 x vector<2xi32>> 
    %40 = builtin.unrealized_conversion_cast %39 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %40 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_same_types(%arg0: vector<2x8xi8>, %arg1: vector<2x8xi8>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg1 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %4 = builtin.unrealized_conversion_cast %3 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %5 = builtin.unrealized_conversion_cast %4 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %6 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %7 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %8 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<8xi8>> 
    %9 = llvm.shufflevector %8, %8 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %10 = llvm.shufflevector %9, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %11 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi8>> 
    %12 = llvm.shufflevector %11, %11 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %13 = llvm.shufflevector %12, %10 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %14 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<8xi8>> 
    %15 = llvm.shufflevector %14, %14 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %16 = llvm.shufflevector %15, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %17 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<8xi8>> 
    %18 = llvm.shufflevector %17, %17 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %19 = llvm.shufflevector %18, %16 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %20 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<2xi32>> 
    %21 = llvm.shufflevector %20, %20 [0, 1, 0, 0] : vector<2xi32> 
    %22 = llvm.shufflevector %21, %6 [0, 1, 6, 7] : vector<4xi32> 
    %23 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<2xi32>> 
    %24 = llvm.shufflevector %23, %23 [0, 1, 0, 0] : vector<2xi32> 
    %25 = llvm.shufflevector %24, %22 [4, 5, 0, 1] : vector<4xi32> 
    %26 = arm_neon.intr.smmla %25, %13, %19 : vector<16xi8> to vector<4xi32>
    %27 = llvm.shufflevector %26, %26 [0, 1] : vector<4xi32> 
    %28 = llvm.insertvalue %27, %5[0] : !llvm.array<2 x vector<2xi32>> 
    %29 = llvm.shufflevector %26, %26 [2, 3] : vector<4xi32> 
    %30 = llvm.insertvalue %29, %28[1] : !llvm.array<2 x vector<2xi32>> 
    %31 = builtin.unrealized_conversion_cast %30 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %31 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_without_extsi(%arg0: vector<2x8xi32>, %arg1: vector<2x8xi32>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %1 = builtin.unrealized_conversion_cast %arg1 : vector<2x8xi32> to !llvm.array<2 x vector<8xi32>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<2x8xi32> to !llvm.array<2 x vector<8xi32>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %4 = builtin.unrealized_conversion_cast %3 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %5 = builtin.unrealized_conversion_cast %4 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %6 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<8xi32>> 
    %7 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<8xi32>> 
    %8 = llvm.mul %6, %7 : vector<8xi32>
    %9 = "llvm.intr.vector.reduce.add"(%8) : (vector<8xi32>) -> i32
    %10 = llvm.extractvalue %5[0] : !llvm.array<2 x vector<2xi32>> 
    %11 = llvm.mlir.constant(0 : i64) : i64
    %12 = llvm.insertelement %9, %10[%11 : i64] : vector<2xi32>
    %13 = llvm.insertvalue %12, %5[0] : !llvm.array<2 x vector<2xi32>> 
    %14 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<8xi32>> 
    %15 = llvm.mul %6, %14 : vector<8xi32>
    %16 = "llvm.intr.vector.reduce.add"(%15) : (vector<8xi32>) -> i32
    %17 = llvm.extractvalue %13[0] : !llvm.array<2 x vector<2xi32>> 
    %18 = llvm.mlir.constant(1 : i64) : i64
    %19 = llvm.insertelement %16, %17[%18 : i64] : vector<2xi32>
    %20 = llvm.insertvalue %19, %13[0] : !llvm.array<2 x vector<2xi32>> 
    %21 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<8xi32>> 
    %22 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<8xi32>> 
    %23 = llvm.mul %21, %22 : vector<8xi32>
    %24 = "llvm.intr.vector.reduce.add"(%23) : (vector<8xi32>) -> i32
    %25 = llvm.extractvalue %20[1] : !llvm.array<2 x vector<2xi32>> 
    %26 = llvm.mlir.constant(0 : i64) : i64
    %27 = llvm.insertelement %24, %25[%26 : i64] : vector<2xi32>
    %28 = llvm.insertvalue %27, %20[1] : !llvm.array<2 x vector<2xi32>> 
    %29 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<8xi32>> 
    %30 = llvm.mul %21, %29 : vector<8xi32>
    %31 = "llvm.intr.vector.reduce.add"(%30) : (vector<8xi32>) -> i32
    %32 = llvm.extractvalue %28[1] : !llvm.array<2 x vector<2xi32>> 
    %33 = llvm.mlir.constant(1 : i64) : i64
    %34 = llvm.insertelement %31, %32[%33 : i64] : vector<2xi32>
    %35 = llvm.insertvalue %34, %28[1] : !llvm.array<2 x vector<2xi32>> 
    %36 = llvm.mlir.undef : !llvm.array<2 x vector<2xi32>>
    %37 = llvm.extractvalue %35[0] : !llvm.array<2 x vector<2xi32>> 
    %38 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<2xi32>> 
    %39 = llvm.add %37, %38 : vector<2xi32>
    %40 = llvm.insertvalue %39, %36[0] : !llvm.array<2 x vector<2xi32>> 
    %41 = llvm.extractvalue %35[1] : !llvm.array<2 x vector<2xi32>> 
    %42 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<2xi32>> 
    %43 = llvm.add %41, %42 : vector<2xi32>
    %44 = llvm.insertvalue %43, %40[1] : !llvm.array<2 x vector<2xi32>> 
    %45 = builtin.unrealized_conversion_cast %44 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %45 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_unroll(%arg0: vector<4x8xi8>, %arg1: vector<4x8xi8>, %arg2: vector<4x4xi32>) -> vector<4x4xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<4x8xi8> to !llvm.array<4 x vector<8xi8>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<4x8xi8> to !llvm.array<4 x vector<8xi8>>
    %2 = builtin.unrealized_conversion_cast %arg2 : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %4 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %5 = llvm.mlir.constant(dense<0> : vector<4x4xi32>) : !llvm.array<4 x vector<4xi32>>
    %6 = builtin.unrealized_conversion_cast %5 : !llvm.array<4 x vector<4xi32>> to vector<4x4xi32>
    %7 = builtin.unrealized_conversion_cast %6 : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %8 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<4xi32>> 
    %9 = llvm.shufflevector %8, %8 [0, 1] : vector<4xi32> 
    %10 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<4xi32>> 
    %11 = llvm.shufflevector %10, %10 [0, 1] : vector<4xi32> 
    %12 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<8xi8>> 
    %13 = llvm.shufflevector %12, %12 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %14 = llvm.shufflevector %13, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %15 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<8xi8>> 
    %16 = llvm.shufflevector %15, %15 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %17 = llvm.shufflevector %16, %14 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %18 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<8xi8>> 
    %19 = llvm.shufflevector %18, %18 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %20 = llvm.shufflevector %19, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %21 = llvm.extractvalue %0[1] : !llvm.array<4 x vector<8xi8>> 
    %22 = llvm.shufflevector %21, %21 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %23 = llvm.shufflevector %22, %20 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %24 = llvm.shufflevector %9, %9 [0, 1, 0, 0] : vector<2xi32> 
    %25 = llvm.shufflevector %24, %3 [0, 1, 6, 7] : vector<4xi32> 
    %26 = llvm.shufflevector %11, %11 [0, 1, 0, 0] : vector<2xi32> 
    %27 = llvm.shufflevector %26, %25 [4, 5, 0, 1] : vector<4xi32> 
    %28 = arm_neon.intr.smmla %27, %17, %23 : vector<16xi8> to vector<4xi32>
    %29 = llvm.shufflevector %28, %28 [0, 1] : vector<4xi32> 
    %30 = llvm.shufflevector %28, %28 [2, 3] : vector<4xi32> 
    %31 = llvm.extractvalue %7[0] : !llvm.array<4 x vector<4xi32>> 
    %32 = llvm.shufflevector %29, %29 [0, 1, 0, 0] : vector<2xi32> 
    %33 = llvm.shufflevector %32, %31 [0, 1, 6, 7] : vector<4xi32> 
    %34 = llvm.insertvalue %33, %7[0] : !llvm.array<4 x vector<4xi32>> 
    %35 = llvm.extractvalue %7[1] : !llvm.array<4 x vector<4xi32>> 
    %36 = llvm.shufflevector %30, %30 [0, 1, 0, 0] : vector<2xi32> 
    %37 = llvm.shufflevector %36, %35 [0, 1, 6, 7] : vector<4xi32> 
    %38 = llvm.insertvalue %37, %34[1] : !llvm.array<4 x vector<4xi32>> 
    %39 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<4xi32>> 
    %40 = llvm.shufflevector %39, %39 [2, 3] : vector<4xi32> 
    %41 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<4xi32>> 
    %42 = llvm.shufflevector %41, %41 [2, 3] : vector<4xi32> 
    %43 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<8xi8>> 
    %44 = llvm.shufflevector %43, %43 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %45 = llvm.shufflevector %44, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %46 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<8xi8>> 
    %47 = llvm.shufflevector %46, %46 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %48 = llvm.shufflevector %47, %45 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %49 = llvm.extractvalue %0[2] : !llvm.array<4 x vector<8xi8>> 
    %50 = llvm.shufflevector %49, %49 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %51 = llvm.shufflevector %50, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %52 = llvm.extractvalue %0[3] : !llvm.array<4 x vector<8xi8>> 
    %53 = llvm.shufflevector %52, %52 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %54 = llvm.shufflevector %53, %51 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %55 = llvm.shufflevector %40, %40 [0, 1, 0, 0] : vector<2xi32> 
    %56 = llvm.shufflevector %55, %3 [0, 1, 6, 7] : vector<4xi32> 
    %57 = llvm.shufflevector %42, %42 [0, 1, 0, 0] : vector<2xi32> 
    %58 = llvm.shufflevector %57, %56 [4, 5, 0, 1] : vector<4xi32> 
    %59 = arm_neon.intr.smmla %58, %48, %54 : vector<16xi8> to vector<4xi32>
    %60 = llvm.shufflevector %59, %59 [0, 1] : vector<4xi32> 
    %61 = llvm.shufflevector %59, %59 [2, 3] : vector<4xi32> 
    %62 = llvm.shufflevector %60, %60 [0, 1, 0, 0] : vector<2xi32> 
    %63 = llvm.shufflevector %62, %33 [4, 5, 0, 1] : vector<4xi32> 
    %64 = llvm.insertvalue %63, %38[0] : !llvm.array<4 x vector<4xi32>> 
    %65 = llvm.shufflevector %61, %61 [0, 1, 0, 0] : vector<2xi32> 
    %66 = llvm.shufflevector %65, %37 [4, 5, 0, 1] : vector<4xi32> 
    %67 = llvm.insertvalue %66, %64[1] : !llvm.array<4 x vector<4xi32>> 
    %68 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<4xi32>> 
    %69 = llvm.shufflevector %68, %68 [0, 1] : vector<4xi32> 
    %70 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<4xi32>> 
    %71 = llvm.shufflevector %70, %70 [0, 1] : vector<4xi32> 
    %72 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<8xi8>> 
    %73 = llvm.shufflevector %72, %72 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %74 = llvm.shufflevector %73, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %75 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<8xi8>> 
    %76 = llvm.shufflevector %75, %75 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %77 = llvm.shufflevector %76, %74 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %78 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<8xi8>> 
    %79 = llvm.shufflevector %78, %78 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %80 = llvm.shufflevector %79, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %81 = llvm.extractvalue %0[1] : !llvm.array<4 x vector<8xi8>> 
    %82 = llvm.shufflevector %81, %81 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %83 = llvm.shufflevector %82, %80 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %84 = llvm.shufflevector %69, %69 [0, 1, 0, 0] : vector<2xi32> 
    %85 = llvm.shufflevector %84, %3 [0, 1, 6, 7] : vector<4xi32> 
    %86 = llvm.shufflevector %71, %71 [0, 1, 0, 0] : vector<2xi32> 
    %87 = llvm.shufflevector %86, %85 [4, 5, 0, 1] : vector<4xi32> 
    %88 = arm_neon.intr.smmla %87, %77, %83 : vector<16xi8> to vector<4xi32>
    %89 = llvm.shufflevector %88, %88 [0, 1] : vector<4xi32> 
    %90 = llvm.shufflevector %88, %88 [2, 3] : vector<4xi32> 
    %91 = llvm.extractvalue %7[2] : !llvm.array<4 x vector<4xi32>> 
    %92 = llvm.shufflevector %89, %89 [0, 1, 0, 0] : vector<2xi32> 
    %93 = llvm.shufflevector %92, %91 [0, 1, 6, 7] : vector<4xi32> 
    %94 = llvm.insertvalue %93, %67[2] : !llvm.array<4 x vector<4xi32>> 
    %95 = llvm.extractvalue %7[3] : !llvm.array<4 x vector<4xi32>> 
    %96 = llvm.shufflevector %90, %90 [0, 1, 0, 0] : vector<2xi32> 
    %97 = llvm.shufflevector %96, %95 [0, 1, 6, 7] : vector<4xi32> 
    %98 = llvm.insertvalue %97, %94[3] : !llvm.array<4 x vector<4xi32>> 
    %99 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<4xi32>> 
    %100 = llvm.shufflevector %99, %99 [2, 3] : vector<4xi32> 
    %101 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<4xi32>> 
    %102 = llvm.shufflevector %101, %101 [2, 3] : vector<4xi32> 
    %103 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<8xi8>> 
    %104 = llvm.shufflevector %103, %103 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %105 = llvm.shufflevector %104, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %106 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<8xi8>> 
    %107 = llvm.shufflevector %106, %106 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %108 = llvm.shufflevector %107, %105 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %109 = llvm.extractvalue %0[2] : !llvm.array<4 x vector<8xi8>> 
    %110 = llvm.shufflevector %109, %109 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %111 = llvm.shufflevector %110, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %112 = llvm.extractvalue %0[3] : !llvm.array<4 x vector<8xi8>> 
    %113 = llvm.shufflevector %112, %112 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %114 = llvm.shufflevector %113, %111 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %115 = llvm.shufflevector %100, %100 [0, 1, 0, 0] : vector<2xi32> 
    %116 = llvm.shufflevector %115, %3 [0, 1, 6, 7] : vector<4xi32> 
    %117 = llvm.shufflevector %102, %102 [0, 1, 0, 0] : vector<2xi32> 
    %118 = llvm.shufflevector %117, %116 [4, 5, 0, 1] : vector<4xi32> 
    %119 = arm_neon.intr.smmla %118, %108, %114 : vector<16xi8> to vector<4xi32>
    %120 = llvm.shufflevector %119, %119 [0, 1] : vector<4xi32> 
    %121 = llvm.shufflevector %119, %119 [2, 3] : vector<4xi32> 
    %122 = llvm.shufflevector %120, %120 [0, 1, 0, 0] : vector<2xi32> 
    %123 = llvm.shufflevector %122, %93 [4, 5, 0, 1] : vector<4xi32> 
    %124 = llvm.insertvalue %123, %98[2] : !llvm.array<4 x vector<4xi32>> 
    %125 = llvm.shufflevector %121, %121 [0, 1, 0, 0] : vector<2xi32> 
    %126 = llvm.shufflevector %125, %97 [4, 5, 0, 1] : vector<4xi32> 
    %127 = llvm.insertvalue %126, %124[3] : !llvm.array<4 x vector<4xi32>> 
    %128 = builtin.unrealized_conversion_cast %127 : !llvm.array<4 x vector<4xi32>> to vector<4x4xi32>
    return %128 : vector<4x4xi32>
  }
  func.func @vector_arm_neon_mixed_unroll(%arg0: vector<4x8xi8>, %arg1: vector<2x8xi4>, %arg2: vector<4x2xi32>) -> vector<4x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<2x8xi4> to !llvm.array<2 x vector<8xi4>>
    %1 = builtin.unrealized_conversion_cast %arg2 : vector<4x2xi32> to !llvm.array<4 x vector<2xi32>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<4x8xi8> to !llvm.array<4 x vector<8xi8>>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %4 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %5 = llvm.mlir.constant(dense<0> : vector<4x2xi32>) : !llvm.array<4 x vector<2xi32>>
    %6 = builtin.unrealized_conversion_cast %5 : !llvm.array<4 x vector<2xi32>> to vector<4x2xi32>
    %7 = builtin.unrealized_conversion_cast %6 : vector<4x2xi32> to !llvm.array<4 x vector<2xi32>>
    %8 = llvm.mlir.undef : !llvm.array<2 x vector<8xi8>>
    %9 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<8xi4>> 
    %10 = llvm.sext %9 : vector<8xi4> to vector<8xi8>
    %11 = llvm.insertvalue %10, %8[0] : !llvm.array<2 x vector<8xi8>> 
    %12 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<8xi4>> 
    %13 = llvm.sext %12 : vector<8xi4> to vector<8xi8>
    %14 = llvm.insertvalue %13, %11[1] : !llvm.array<2 x vector<8xi8>> 
    %15 = builtin.unrealized_conversion_cast %14 : !llvm.array<2 x vector<8xi8>> to vector<2x8xi8>
    %16 = builtin.unrealized_conversion_cast %15 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %17 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<8xi8>> 
    %18 = llvm.shufflevector %17, %17 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %19 = llvm.shufflevector %18, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %20 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<8xi8>> 
    %21 = llvm.shufflevector %20, %20 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %22 = llvm.shufflevector %21, %19 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %23 = llvm.extractvalue %16[0] : !llvm.array<2 x vector<8xi8>> 
    %24 = llvm.shufflevector %23, %23 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %25 = llvm.shufflevector %24, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %26 = llvm.extractvalue %16[1] : !llvm.array<2 x vector<8xi8>> 
    %27 = llvm.shufflevector %26, %26 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %28 = llvm.shufflevector %27, %25 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %29 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<2xi32>> 
    %30 = llvm.shufflevector %29, %29 [0, 1, 0, 0] : vector<2xi32> 
    %31 = llvm.shufflevector %30, %3 [0, 1, 6, 7] : vector<4xi32> 
    %32 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<2xi32>> 
    %33 = llvm.shufflevector %32, %32 [0, 1, 0, 0] : vector<2xi32> 
    %34 = llvm.shufflevector %33, %31 [4, 5, 0, 1] : vector<4xi32> 
    %35 = arm_neon.intr.smmla %34, %22, %28 : vector<16xi8> to vector<4xi32>
    %36 = llvm.shufflevector %35, %35 [0, 1] : vector<4xi32> 
    %37 = llvm.shufflevector %35, %35 [2, 3] : vector<4xi32> 
    %38 = llvm.insertvalue %36, %7[0] : !llvm.array<4 x vector<2xi32>> 
    %39 = llvm.insertvalue %37, %38[1] : !llvm.array<4 x vector<2xi32>> 
    %40 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<8xi8>> 
    %41 = llvm.shufflevector %40, %40 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %42 = llvm.shufflevector %41, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %43 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<8xi8>> 
    %44 = llvm.shufflevector %43, %43 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %45 = llvm.shufflevector %44, %42 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %46 = llvm.extractvalue %16[0] : !llvm.array<2 x vector<8xi8>> 
    %47 = llvm.shufflevector %46, %46 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %48 = llvm.shufflevector %47, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %49 = llvm.extractvalue %16[1] : !llvm.array<2 x vector<8xi8>> 
    %50 = llvm.shufflevector %49, %49 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %51 = llvm.shufflevector %50, %48 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %52 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<2xi32>> 
    %53 = llvm.shufflevector %52, %52 [0, 1, 0, 0] : vector<2xi32> 
    %54 = llvm.shufflevector %53, %3 [0, 1, 6, 7] : vector<4xi32> 
    %55 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<2xi32>> 
    %56 = llvm.shufflevector %55, %55 [0, 1, 0, 0] : vector<2xi32> 
    %57 = llvm.shufflevector %56, %54 [4, 5, 0, 1] : vector<4xi32> 
    %58 = arm_neon.intr.smmla %57, %45, %51 : vector<16xi8> to vector<4xi32>
    %59 = llvm.shufflevector %58, %58 [0, 1] : vector<4xi32> 
    %60 = llvm.shufflevector %58, %58 [2, 3] : vector<4xi32> 
    %61 = llvm.insertvalue %59, %39[2] : !llvm.array<4 x vector<2xi32>> 
    %62 = llvm.insertvalue %60, %61[3] : !llvm.array<4 x vector<2xi32>> 
    %63 = builtin.unrealized_conversion_cast %62 : !llvm.array<4 x vector<2xi32>> to vector<4x2xi32>
    return %63 : vector<4x2xi32>
  }
  func.func @vector_arm_neon_unroll_incompatible_shape(%arg0: vector<4x12xi8>, %arg1: vector<4x12xi8>, %arg2: vector<4x4xi32>) -> vector<4x4xi32> {
    %0 = builtin.unrealized_conversion_cast %arg2 : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %1 = builtin.unrealized_conversion_cast %arg1 : vector<4x12xi8> to !llvm.array<4 x vector<12xi8>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<4x12xi8> to !llvm.array<4 x vector<12xi8>>
    %3 = llvm.mlir.constant(dense<0> : vector<4x4xi32>) : !llvm.array<4 x vector<4xi32>>
    %4 = builtin.unrealized_conversion_cast %3 : !llvm.array<4 x vector<4xi32>> to vector<4x4xi32>
    %5 = builtin.unrealized_conversion_cast %4 : vector<4x4xi32> to !llvm.array<4 x vector<4xi32>>
    %6 = llvm.mlir.undef : !llvm.array<4 x vector<12xi32>>
    %7 = llvm.extractvalue %2[0] : !llvm.array<4 x vector<12xi8>> 
    %8 = llvm.sext %7 : vector<12xi8> to vector<12xi32>
    %9 = llvm.insertvalue %8, %6[0] : !llvm.array<4 x vector<12xi32>> 
    %10 = llvm.extractvalue %2[1] : !llvm.array<4 x vector<12xi8>> 
    %11 = llvm.sext %10 : vector<12xi8> to vector<12xi32>
    %12 = llvm.insertvalue %11, %9[1] : !llvm.array<4 x vector<12xi32>> 
    %13 = llvm.extractvalue %2[2] : !llvm.array<4 x vector<12xi8>> 
    %14 = llvm.sext %13 : vector<12xi8> to vector<12xi32>
    %15 = llvm.insertvalue %14, %12[2] : !llvm.array<4 x vector<12xi32>> 
    %16 = llvm.extractvalue %2[3] : !llvm.array<4 x vector<12xi8>> 
    %17 = llvm.sext %16 : vector<12xi8> to vector<12xi32>
    %18 = llvm.insertvalue %17, %15[3] : !llvm.array<4 x vector<12xi32>> 
    %19 = builtin.unrealized_conversion_cast %18 : !llvm.array<4 x vector<12xi32>> to vector<4x12xi32>
    %20 = builtin.unrealized_conversion_cast %19 : vector<4x12xi32> to !llvm.array<4 x vector<12xi32>>
    %21 = llvm.mlir.undef : !llvm.array<4 x vector<12xi32>>
    %22 = llvm.extractvalue %1[0] : !llvm.array<4 x vector<12xi8>> 
    %23 = llvm.sext %22 : vector<12xi8> to vector<12xi32>
    %24 = llvm.insertvalue %23, %21[0] : !llvm.array<4 x vector<12xi32>> 
    %25 = llvm.extractvalue %1[1] : !llvm.array<4 x vector<12xi8>> 
    %26 = llvm.sext %25 : vector<12xi8> to vector<12xi32>
    %27 = llvm.insertvalue %26, %24[1] : !llvm.array<4 x vector<12xi32>> 
    %28 = llvm.extractvalue %1[2] : !llvm.array<4 x vector<12xi8>> 
    %29 = llvm.sext %28 : vector<12xi8> to vector<12xi32>
    %30 = llvm.insertvalue %29, %27[2] : !llvm.array<4 x vector<12xi32>> 
    %31 = llvm.extractvalue %1[3] : !llvm.array<4 x vector<12xi8>> 
    %32 = llvm.sext %31 : vector<12xi8> to vector<12xi32>
    %33 = llvm.insertvalue %32, %30[3] : !llvm.array<4 x vector<12xi32>> 
    %34 = builtin.unrealized_conversion_cast %33 : !llvm.array<4 x vector<12xi32>> to vector<4x12xi32>
    %35 = builtin.unrealized_conversion_cast %34 : vector<4x12xi32> to !llvm.array<4 x vector<12xi32>>
    %36 = llvm.extractvalue %20[0] : !llvm.array<4 x vector<12xi32>> 
    %37 = llvm.extractvalue %35[0] : !llvm.array<4 x vector<12xi32>> 
    %38 = llvm.mul %36, %37 : vector<12xi32>
    %39 = "llvm.intr.vector.reduce.add"(%38) : (vector<12xi32>) -> i32
    %40 = llvm.extractvalue %5[0] : !llvm.array<4 x vector<4xi32>> 
    %41 = llvm.mlir.constant(0 : i64) : i64
    %42 = llvm.insertelement %39, %40[%41 : i64] : vector<4xi32>
    %43 = llvm.insertvalue %42, %5[0] : !llvm.array<4 x vector<4xi32>> 
    %44 = llvm.extractvalue %35[1] : !llvm.array<4 x vector<12xi32>> 
    %45 = llvm.mul %36, %44 : vector<12xi32>
    %46 = "llvm.intr.vector.reduce.add"(%45) : (vector<12xi32>) -> i32
    %47 = llvm.extractvalue %43[0] : !llvm.array<4 x vector<4xi32>> 
    %48 = llvm.mlir.constant(1 : i64) : i64
    %49 = llvm.insertelement %46, %47[%48 : i64] : vector<4xi32>
    %50 = llvm.insertvalue %49, %43[0] : !llvm.array<4 x vector<4xi32>> 
    %51 = llvm.extractvalue %35[2] : !llvm.array<4 x vector<12xi32>> 
    %52 = llvm.mul %36, %51 : vector<12xi32>
    %53 = "llvm.intr.vector.reduce.add"(%52) : (vector<12xi32>) -> i32
    %54 = llvm.extractvalue %50[0] : !llvm.array<4 x vector<4xi32>> 
    %55 = llvm.mlir.constant(2 : i64) : i64
    %56 = llvm.insertelement %53, %54[%55 : i64] : vector<4xi32>
    %57 = llvm.insertvalue %56, %50[0] : !llvm.array<4 x vector<4xi32>> 
    %58 = llvm.extractvalue %35[3] : !llvm.array<4 x vector<12xi32>> 
    %59 = llvm.mul %36, %58 : vector<12xi32>
    %60 = "llvm.intr.vector.reduce.add"(%59) : (vector<12xi32>) -> i32
    %61 = llvm.extractvalue %57[0] : !llvm.array<4 x vector<4xi32>> 
    %62 = llvm.mlir.constant(3 : i64) : i64
    %63 = llvm.insertelement %60, %61[%62 : i64] : vector<4xi32>
    %64 = llvm.insertvalue %63, %57[0] : !llvm.array<4 x vector<4xi32>> 
    %65 = llvm.extractvalue %20[1] : !llvm.array<4 x vector<12xi32>> 
    %66 = llvm.extractvalue %35[0] : !llvm.array<4 x vector<12xi32>> 
    %67 = llvm.mul %65, %66 : vector<12xi32>
    %68 = "llvm.intr.vector.reduce.add"(%67) : (vector<12xi32>) -> i32
    %69 = llvm.extractvalue %64[1] : !llvm.array<4 x vector<4xi32>> 
    %70 = llvm.mlir.constant(0 : i64) : i64
    %71 = llvm.insertelement %68, %69[%70 : i64] : vector<4xi32>
    %72 = llvm.insertvalue %71, %64[1] : !llvm.array<4 x vector<4xi32>> 
    %73 = llvm.extractvalue %35[1] : !llvm.array<4 x vector<12xi32>> 
    %74 = llvm.mul %65, %73 : vector<12xi32>
    %75 = "llvm.intr.vector.reduce.add"(%74) : (vector<12xi32>) -> i32
    %76 = llvm.extractvalue %72[1] : !llvm.array<4 x vector<4xi32>> 
    %77 = llvm.mlir.constant(1 : i64) : i64
    %78 = llvm.insertelement %75, %76[%77 : i64] : vector<4xi32>
    %79 = llvm.insertvalue %78, %72[1] : !llvm.array<4 x vector<4xi32>> 
    %80 = llvm.extractvalue %35[2] : !llvm.array<4 x vector<12xi32>> 
    %81 = llvm.mul %65, %80 : vector<12xi32>
    %82 = "llvm.intr.vector.reduce.add"(%81) : (vector<12xi32>) -> i32
    %83 = llvm.extractvalue %79[1] : !llvm.array<4 x vector<4xi32>> 
    %84 = llvm.mlir.constant(2 : i64) : i64
    %85 = llvm.insertelement %82, %83[%84 : i64] : vector<4xi32>
    %86 = llvm.insertvalue %85, %79[1] : !llvm.array<4 x vector<4xi32>> 
    %87 = llvm.extractvalue %35[3] : !llvm.array<4 x vector<12xi32>> 
    %88 = llvm.mul %65, %87 : vector<12xi32>
    %89 = "llvm.intr.vector.reduce.add"(%88) : (vector<12xi32>) -> i32
    %90 = llvm.extractvalue %86[1] : !llvm.array<4 x vector<4xi32>> 
    %91 = llvm.mlir.constant(3 : i64) : i64
    %92 = llvm.insertelement %89, %90[%91 : i64] : vector<4xi32>
    %93 = llvm.insertvalue %92, %86[1] : !llvm.array<4 x vector<4xi32>> 
    %94 = llvm.extractvalue %20[2] : !llvm.array<4 x vector<12xi32>> 
    %95 = llvm.extractvalue %35[0] : !llvm.array<4 x vector<12xi32>> 
    %96 = llvm.mul %94, %95 : vector<12xi32>
    %97 = "llvm.intr.vector.reduce.add"(%96) : (vector<12xi32>) -> i32
    %98 = llvm.extractvalue %93[2] : !llvm.array<4 x vector<4xi32>> 
    %99 = llvm.mlir.constant(0 : i64) : i64
    %100 = llvm.insertelement %97, %98[%99 : i64] : vector<4xi32>
    %101 = llvm.insertvalue %100, %93[2] : !llvm.array<4 x vector<4xi32>> 
    %102 = llvm.extractvalue %35[1] : !llvm.array<4 x vector<12xi32>> 
    %103 = llvm.mul %94, %102 : vector<12xi32>
    %104 = "llvm.intr.vector.reduce.add"(%103) : (vector<12xi32>) -> i32
    %105 = llvm.extractvalue %101[2] : !llvm.array<4 x vector<4xi32>> 
    %106 = llvm.mlir.constant(1 : i64) : i64
    %107 = llvm.insertelement %104, %105[%106 : i64] : vector<4xi32>
    %108 = llvm.insertvalue %107, %101[2] : !llvm.array<4 x vector<4xi32>> 
    %109 = llvm.extractvalue %35[2] : !llvm.array<4 x vector<12xi32>> 
    %110 = llvm.mul %94, %109 : vector<12xi32>
    %111 = "llvm.intr.vector.reduce.add"(%110) : (vector<12xi32>) -> i32
    %112 = llvm.extractvalue %108[2] : !llvm.array<4 x vector<4xi32>> 
    %113 = llvm.mlir.constant(2 : i64) : i64
    %114 = llvm.insertelement %111, %112[%113 : i64] : vector<4xi32>
    %115 = llvm.insertvalue %114, %108[2] : !llvm.array<4 x vector<4xi32>> 
    %116 = llvm.extractvalue %35[3] : !llvm.array<4 x vector<12xi32>> 
    %117 = llvm.mul %94, %116 : vector<12xi32>
    %118 = "llvm.intr.vector.reduce.add"(%117) : (vector<12xi32>) -> i32
    %119 = llvm.extractvalue %115[2] : !llvm.array<4 x vector<4xi32>> 
    %120 = llvm.mlir.constant(3 : i64) : i64
    %121 = llvm.insertelement %118, %119[%120 : i64] : vector<4xi32>
    %122 = llvm.insertvalue %121, %115[2] : !llvm.array<4 x vector<4xi32>> 
    %123 = llvm.extractvalue %20[3] : !llvm.array<4 x vector<12xi32>> 
    %124 = llvm.extractvalue %35[0] : !llvm.array<4 x vector<12xi32>> 
    %125 = llvm.mul %123, %124 : vector<12xi32>
    %126 = "llvm.intr.vector.reduce.add"(%125) : (vector<12xi32>) -> i32
    %127 = llvm.extractvalue %122[3] : !llvm.array<4 x vector<4xi32>> 
    %128 = llvm.mlir.constant(0 : i64) : i64
    %129 = llvm.insertelement %126, %127[%128 : i64] : vector<4xi32>
    %130 = llvm.insertvalue %129, %122[3] : !llvm.array<4 x vector<4xi32>> 
    %131 = llvm.extractvalue %35[1] : !llvm.array<4 x vector<12xi32>> 
    %132 = llvm.mul %123, %131 : vector<12xi32>
    %133 = "llvm.intr.vector.reduce.add"(%132) : (vector<12xi32>) -> i32
    %134 = llvm.extractvalue %130[3] : !llvm.array<4 x vector<4xi32>> 
    %135 = llvm.mlir.constant(1 : i64) : i64
    %136 = llvm.insertelement %133, %134[%135 : i64] : vector<4xi32>
    %137 = llvm.insertvalue %136, %130[3] : !llvm.array<4 x vector<4xi32>> 
    %138 = llvm.extractvalue %35[2] : !llvm.array<4 x vector<12xi32>> 
    %139 = llvm.mul %123, %138 : vector<12xi32>
    %140 = "llvm.intr.vector.reduce.add"(%139) : (vector<12xi32>) -> i32
    %141 = llvm.extractvalue %137[3] : !llvm.array<4 x vector<4xi32>> 
    %142 = llvm.mlir.constant(2 : i64) : i64
    %143 = llvm.insertelement %140, %141[%142 : i64] : vector<4xi32>
    %144 = llvm.insertvalue %143, %137[3] : !llvm.array<4 x vector<4xi32>> 
    %145 = llvm.extractvalue %35[3] : !llvm.array<4 x vector<12xi32>> 
    %146 = llvm.mul %123, %145 : vector<12xi32>
    %147 = "llvm.intr.vector.reduce.add"(%146) : (vector<12xi32>) -> i32
    %148 = llvm.extractvalue %144[3] : !llvm.array<4 x vector<4xi32>> 
    %149 = llvm.mlir.constant(3 : i64) : i64
    %150 = llvm.insertelement %147, %148[%149 : i64] : vector<4xi32>
    %151 = llvm.insertvalue %150, %144[3] : !llvm.array<4 x vector<4xi32>> 
    %152 = llvm.mlir.undef : !llvm.array<4 x vector<4xi32>>
    %153 = llvm.extractvalue %151[0] : !llvm.array<4 x vector<4xi32>> 
    %154 = llvm.extractvalue %0[0] : !llvm.array<4 x vector<4xi32>> 
    %155 = llvm.add %153, %154 : vector<4xi32>
    %156 = llvm.insertvalue %155, %152[0] : !llvm.array<4 x vector<4xi32>> 
    %157 = llvm.extractvalue %151[1] : !llvm.array<4 x vector<4xi32>> 
    %158 = llvm.extractvalue %0[1] : !llvm.array<4 x vector<4xi32>> 
    %159 = llvm.add %157, %158 : vector<4xi32>
    %160 = llvm.insertvalue %159, %156[1] : !llvm.array<4 x vector<4xi32>> 
    %161 = llvm.extractvalue %151[2] : !llvm.array<4 x vector<4xi32>> 
    %162 = llvm.extractvalue %0[2] : !llvm.array<4 x vector<4xi32>> 
    %163 = llvm.add %161, %162 : vector<4xi32>
    %164 = llvm.insertvalue %163, %160[2] : !llvm.array<4 x vector<4xi32>> 
    %165 = llvm.extractvalue %151[3] : !llvm.array<4 x vector<4xi32>> 
    %166 = llvm.extractvalue %0[3] : !llvm.array<4 x vector<4xi32>> 
    %167 = llvm.add %165, %166 : vector<4xi32>
    %168 = llvm.insertvalue %167, %164[3] : !llvm.array<4 x vector<4xi32>> 
    %169 = builtin.unrealized_conversion_cast %168 : !llvm.array<4 x vector<4xi32>> to vector<4x4xi32>
    return %169 : vector<4x4xi32>
  }
  func.func @vector_arm_neon_vecmat_unroll(%arg0: vector<8xi8>, %arg1: vector<8x8xi8>, %arg2: vector<8xi32>) -> vector<8xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<8x8xi8> to !llvm.array<8 x vector<8xi8>>
    %1 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %2 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %3 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %4 = builtin.unrealized_conversion_cast %3 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %5 = builtin.unrealized_conversion_cast %4 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %6 = llvm.mlir.constant(dense<0> : vector<2x8xi8>) : !llvm.array<2 x vector<8xi8>>
    %7 = builtin.unrealized_conversion_cast %6 : !llvm.array<2 x vector<8xi8>> to vector<2x8xi8>
    %8 = builtin.unrealized_conversion_cast %7 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %9 = llvm.mlir.constant(dense<0> : vector<8xi32>) : vector<8xi32>
    %10 = llvm.shufflevector %arg2, %arg2 [0, 1] : vector<8xi32> 
    %11 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %12 = llvm.shufflevector %11, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %13 = llvm.extractvalue %8[1] : !llvm.array<2 x vector<8xi8>> 
    %14 = llvm.shufflevector %13, %13 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %15 = llvm.shufflevector %14, %12 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %16 = llvm.extractvalue %0[0] : !llvm.array<8 x vector<8xi8>> 
    %17 = llvm.shufflevector %16, %16 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %18 = llvm.shufflevector %17, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %19 = llvm.extractvalue %0[1] : !llvm.array<8 x vector<8xi8>> 
    %20 = llvm.shufflevector %19, %19 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %21 = llvm.shufflevector %20, %18 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %22 = llvm.shufflevector %10, %10 [0, 1, 0, 0] : vector<2xi32> 
    %23 = llvm.shufflevector %22, %1 [0, 1, 6, 7] : vector<4xi32> 
    %24 = llvm.extractvalue %5[1] : !llvm.array<2 x vector<2xi32>> 
    %25 = llvm.shufflevector %24, %24 [0, 1, 0, 0] : vector<2xi32> 
    %26 = llvm.shufflevector %25, %23 [4, 5, 0, 1] : vector<4xi32> 
    %27 = arm_neon.intr.smmla %26, %15, %21 : vector<16xi8> to vector<4xi32>
    %28 = llvm.shufflevector %27, %27 [0, 1] : vector<4xi32> 
    %29 = llvm.shufflevector %28, %28 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %30 = llvm.shufflevector %29, %9 [0, 1, 10, 11, 12, 13, 14, 15] : vector<8xi32> 
    %31 = llvm.shufflevector %arg2, %arg2 [2, 3] : vector<8xi32> 
    %32 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %33 = llvm.shufflevector %32, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %34 = llvm.extractvalue %8[1] : !llvm.array<2 x vector<8xi8>> 
    %35 = llvm.shufflevector %34, %34 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %36 = llvm.shufflevector %35, %33 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %37 = llvm.extractvalue %0[2] : !llvm.array<8 x vector<8xi8>> 
    %38 = llvm.shufflevector %37, %37 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %39 = llvm.shufflevector %38, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %40 = llvm.extractvalue %0[3] : !llvm.array<8 x vector<8xi8>> 
    %41 = llvm.shufflevector %40, %40 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %42 = llvm.shufflevector %41, %39 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %43 = llvm.shufflevector %31, %31 [0, 1, 0, 0] : vector<2xi32> 
    %44 = llvm.shufflevector %43, %1 [0, 1, 6, 7] : vector<4xi32> 
    %45 = llvm.extractvalue %5[1] : !llvm.array<2 x vector<2xi32>> 
    %46 = llvm.shufflevector %45, %45 [0, 1, 0, 0] : vector<2xi32> 
    %47 = llvm.shufflevector %46, %44 [4, 5, 0, 1] : vector<4xi32> 
    %48 = arm_neon.intr.smmla %47, %36, %42 : vector<16xi8> to vector<4xi32>
    %49 = llvm.shufflevector %48, %48 [0, 1] : vector<4xi32> 
    %50 = llvm.shufflevector %49, %49 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %51 = llvm.shufflevector %50, %30 [8, 9, 0, 1, 12, 13, 14, 15] : vector<8xi32> 
    %52 = llvm.shufflevector %arg2, %arg2 [4, 5] : vector<8xi32> 
    %53 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %54 = llvm.shufflevector %53, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %55 = llvm.extractvalue %8[1] : !llvm.array<2 x vector<8xi8>> 
    %56 = llvm.shufflevector %55, %55 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %57 = llvm.shufflevector %56, %54 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %58 = llvm.extractvalue %0[4] : !llvm.array<8 x vector<8xi8>> 
    %59 = llvm.shufflevector %58, %58 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %60 = llvm.shufflevector %59, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %61 = llvm.extractvalue %0[5] : !llvm.array<8 x vector<8xi8>> 
    %62 = llvm.shufflevector %61, %61 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %63 = llvm.shufflevector %62, %60 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %64 = llvm.shufflevector %52, %52 [0, 1, 0, 0] : vector<2xi32> 
    %65 = llvm.shufflevector %64, %1 [0, 1, 6, 7] : vector<4xi32> 
    %66 = llvm.extractvalue %5[1] : !llvm.array<2 x vector<2xi32>> 
    %67 = llvm.shufflevector %66, %66 [0, 1, 0, 0] : vector<2xi32> 
    %68 = llvm.shufflevector %67, %65 [4, 5, 0, 1] : vector<4xi32> 
    %69 = arm_neon.intr.smmla %68, %57, %63 : vector<16xi8> to vector<4xi32>
    %70 = llvm.shufflevector %69, %69 [0, 1] : vector<4xi32> 
    %71 = llvm.shufflevector %70, %70 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %72 = llvm.shufflevector %71, %51 [8, 9, 10, 11, 0, 1, 14, 15] : vector<8xi32> 
    %73 = llvm.shufflevector %arg2, %arg2 [6, 7] : vector<8xi32> 
    %74 = llvm.shufflevector %arg0, %arg0 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %75 = llvm.shufflevector %74, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %76 = llvm.extractvalue %8[1] : !llvm.array<2 x vector<8xi8>> 
    %77 = llvm.shufflevector %76, %76 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %78 = llvm.shufflevector %77, %75 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %79 = llvm.extractvalue %0[6] : !llvm.array<8 x vector<8xi8>> 
    %80 = llvm.shufflevector %79, %79 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %81 = llvm.shufflevector %80, %2 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %82 = llvm.extractvalue %0[7] : !llvm.array<8 x vector<8xi8>> 
    %83 = llvm.shufflevector %82, %82 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %84 = llvm.shufflevector %83, %81 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %85 = llvm.shufflevector %73, %73 [0, 1, 0, 0] : vector<2xi32> 
    %86 = llvm.shufflevector %85, %1 [0, 1, 6, 7] : vector<4xi32> 
    %87 = llvm.extractvalue %5[1] : !llvm.array<2 x vector<2xi32>> 
    %88 = llvm.shufflevector %87, %87 [0, 1, 0, 0] : vector<2xi32> 
    %89 = llvm.shufflevector %88, %86 [4, 5, 0, 1] : vector<4xi32> 
    %90 = arm_neon.intr.smmla %89, %78, %84 : vector<16xi8> to vector<4xi32>
    %91 = llvm.shufflevector %90, %90 [0, 1] : vector<4xi32> 
    %92 = llvm.shufflevector %91, %91 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %93 = llvm.shufflevector %92, %72 [8, 9, 10, 11, 12, 13, 0, 1] : vector<8xi32> 
    return %93 : vector<8xi32>
  }
  func.func @vector_arm_neon_vecmat_unroll_leading_dim(%arg0: vector<1x8xi8>, %arg1: vector<8x8xi8>, %arg2: vector<1x8xi32>) -> vector<1x8xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<8x8xi8> to !llvm.array<8 x vector<8xi8>>
    %1 = builtin.unrealized_conversion_cast %arg0 : vector<1x8xi8> to !llvm.array<1 x vector<8xi8>>
    %2 = builtin.unrealized_conversion_cast %arg2 : vector<1x8xi32> to !llvm.array<1 x vector<8xi32>>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %4 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %5 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %6 = builtin.unrealized_conversion_cast %5 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %7 = builtin.unrealized_conversion_cast %6 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %8 = llvm.mlir.constant(dense<0> : vector<2x8xi8>) : !llvm.array<2 x vector<8xi8>>
    %9 = builtin.unrealized_conversion_cast %8 : !llvm.array<2 x vector<8xi8>> to vector<2x8xi8>
    %10 = builtin.unrealized_conversion_cast %9 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %11 = llvm.mlir.constant(dense<0> : vector<1x8xi32>) : !llvm.array<1 x vector<8xi32>>
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.array<1 x vector<8xi32>> to vector<1x8xi32>
    %13 = builtin.unrealized_conversion_cast %12 : vector<1x8xi32> to !llvm.array<1 x vector<8xi32>>
    %14 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>> 
    %15 = llvm.shufflevector %14, %14 [0, 1] : vector<8xi32> 
    %16 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>> 
    %17 = llvm.shufflevector %16, %16 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %18 = llvm.shufflevector %17, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %19 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %20 = llvm.shufflevector %19, %19 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %21 = llvm.shufflevector %20, %18 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %22 = llvm.extractvalue %0[0] : !llvm.array<8 x vector<8xi8>> 
    %23 = llvm.shufflevector %22, %22 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %24 = llvm.shufflevector %23, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %25 = llvm.extractvalue %0[1] : !llvm.array<8 x vector<8xi8>> 
    %26 = llvm.shufflevector %25, %25 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %27 = llvm.shufflevector %26, %24 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %28 = llvm.shufflevector %15, %15 [0, 1, 0, 0] : vector<2xi32> 
    %29 = llvm.shufflevector %28, %3 [0, 1, 6, 7] : vector<4xi32> 
    %30 = llvm.extractvalue %7[1] : !llvm.array<2 x vector<2xi32>> 
    %31 = llvm.shufflevector %30, %30 [0, 1, 0, 0] : vector<2xi32> 
    %32 = llvm.shufflevector %31, %29 [4, 5, 0, 1] : vector<4xi32> 
    %33 = arm_neon.intr.smmla %32, %21, %27 : vector<16xi8> to vector<4xi32>
    %34 = llvm.shufflevector %33, %33 [0, 1] : vector<4xi32> 
    %35 = llvm.extractvalue %13[0] : !llvm.array<1 x vector<8xi32>> 
    %36 = llvm.shufflevector %34, %34 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %37 = llvm.shufflevector %36, %35 [0, 1, 10, 11, 12, 13, 14, 15] : vector<8xi32> 
    %38 = llvm.insertvalue %37, %13[0] : !llvm.array<1 x vector<8xi32>> 
    %39 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>> 
    %40 = llvm.shufflevector %39, %39 [2, 3] : vector<8xi32> 
    %41 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>> 
    %42 = llvm.shufflevector %41, %41 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %43 = llvm.shufflevector %42, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %44 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %45 = llvm.shufflevector %44, %44 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %46 = llvm.shufflevector %45, %43 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %47 = llvm.extractvalue %0[2] : !llvm.array<8 x vector<8xi8>> 
    %48 = llvm.shufflevector %47, %47 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %49 = llvm.shufflevector %48, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %50 = llvm.extractvalue %0[3] : !llvm.array<8 x vector<8xi8>> 
    %51 = llvm.shufflevector %50, %50 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %52 = llvm.shufflevector %51, %49 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %53 = llvm.shufflevector %40, %40 [0, 1, 0, 0] : vector<2xi32> 
    %54 = llvm.shufflevector %53, %3 [0, 1, 6, 7] : vector<4xi32> 
    %55 = llvm.extractvalue %7[1] : !llvm.array<2 x vector<2xi32>> 
    %56 = llvm.shufflevector %55, %55 [0, 1, 0, 0] : vector<2xi32> 
    %57 = llvm.shufflevector %56, %54 [4, 5, 0, 1] : vector<4xi32> 
    %58 = arm_neon.intr.smmla %57, %46, %52 : vector<16xi8> to vector<4xi32>
    %59 = llvm.shufflevector %58, %58 [0, 1] : vector<4xi32> 
    %60 = llvm.shufflevector %59, %59 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %61 = llvm.shufflevector %60, %37 [8, 9, 0, 1, 12, 13, 14, 15] : vector<8xi32> 
    %62 = llvm.insertvalue %61, %38[0] : !llvm.array<1 x vector<8xi32>> 
    %63 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>> 
    %64 = llvm.shufflevector %63, %63 [4, 5] : vector<8xi32> 
    %65 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>> 
    %66 = llvm.shufflevector %65, %65 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %67 = llvm.shufflevector %66, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %68 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %69 = llvm.shufflevector %68, %68 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %70 = llvm.shufflevector %69, %67 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %71 = llvm.extractvalue %0[4] : !llvm.array<8 x vector<8xi8>> 
    %72 = llvm.shufflevector %71, %71 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %73 = llvm.shufflevector %72, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %74 = llvm.extractvalue %0[5] : !llvm.array<8 x vector<8xi8>> 
    %75 = llvm.shufflevector %74, %74 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %76 = llvm.shufflevector %75, %73 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %77 = llvm.shufflevector %64, %64 [0, 1, 0, 0] : vector<2xi32> 
    %78 = llvm.shufflevector %77, %3 [0, 1, 6, 7] : vector<4xi32> 
    %79 = llvm.extractvalue %7[1] : !llvm.array<2 x vector<2xi32>> 
    %80 = llvm.shufflevector %79, %79 [0, 1, 0, 0] : vector<2xi32> 
    %81 = llvm.shufflevector %80, %78 [4, 5, 0, 1] : vector<4xi32> 
    %82 = arm_neon.intr.smmla %81, %70, %76 : vector<16xi8> to vector<4xi32>
    %83 = llvm.shufflevector %82, %82 [0, 1] : vector<4xi32> 
    %84 = llvm.shufflevector %83, %83 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %85 = llvm.shufflevector %84, %61 [8, 9, 10, 11, 0, 1, 14, 15] : vector<8xi32> 
    %86 = llvm.insertvalue %85, %62[0] : !llvm.array<1 x vector<8xi32>> 
    %87 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<8xi32>> 
    %88 = llvm.shufflevector %87, %87 [6, 7] : vector<8xi32> 
    %89 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<8xi8>> 
    %90 = llvm.shufflevector %89, %89 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %91 = llvm.shufflevector %90, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %92 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %93 = llvm.shufflevector %92, %92 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %94 = llvm.shufflevector %93, %91 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %95 = llvm.extractvalue %0[6] : !llvm.array<8 x vector<8xi8>> 
    %96 = llvm.shufflevector %95, %95 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %97 = llvm.shufflevector %96, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %98 = llvm.extractvalue %0[7] : !llvm.array<8 x vector<8xi8>> 
    %99 = llvm.shufflevector %98, %98 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %100 = llvm.shufflevector %99, %97 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %101 = llvm.shufflevector %88, %88 [0, 1, 0, 0] : vector<2xi32> 
    %102 = llvm.shufflevector %101, %3 [0, 1, 6, 7] : vector<4xi32> 
    %103 = llvm.extractvalue %7[1] : !llvm.array<2 x vector<2xi32>> 
    %104 = llvm.shufflevector %103, %103 [0, 1, 0, 0] : vector<2xi32> 
    %105 = llvm.shufflevector %104, %102 [4, 5, 0, 1] : vector<4xi32> 
    %106 = arm_neon.intr.smmla %105, %94, %100 : vector<16xi8> to vector<4xi32>
    %107 = llvm.shufflevector %106, %106 [0, 1] : vector<4xi32> 
    %108 = llvm.shufflevector %107, %107 [0, 1, 0, 0, 0, 0, 0, 0] : vector<2xi32> 
    %109 = llvm.shufflevector %108, %85 [8, 9, 10, 11, 12, 13, 0, 1] : vector<8xi32> 
    %110 = llvm.insertvalue %109, %86[0] : !llvm.array<1 x vector<8xi32>> 
    %111 = builtin.unrealized_conversion_cast %110 : !llvm.array<1 x vector<8xi32>> to vector<1x8xi32>
    return %111 : vector<1x8xi32>
  }
  func.func @vector_arm_neon_matvec(%arg0: vector<8x8xi8>, %arg1: vector<8xi8>, %arg2: vector<8xi32>) -> vector<8xi32> {
    %0 = builtin.unrealized_conversion_cast %arg0 : vector<8x8xi8> to !llvm.array<8 x vector<8xi8>>
    %1 = llvm.mlir.constant(dense<0> : vector<8xi32>) : vector<8xi32>
    %2 = llvm.sext %arg1 : vector<8xi8> to vector<8xi32>
    %3 = llvm.mlir.undef : !llvm.array<8 x vector<8xi32>>
    %4 = llvm.extractvalue %0[0] : !llvm.array<8 x vector<8xi8>> 
    %5 = llvm.sext %4 : vector<8xi8> to vector<8xi32>
    %6 = llvm.insertvalue %5, %3[0] : !llvm.array<8 x vector<8xi32>> 
    %7 = llvm.extractvalue %0[1] : !llvm.array<8 x vector<8xi8>> 
    %8 = llvm.sext %7 : vector<8xi8> to vector<8xi32>
    %9 = llvm.insertvalue %8, %6[1] : !llvm.array<8 x vector<8xi32>> 
    %10 = llvm.extractvalue %0[2] : !llvm.array<8 x vector<8xi8>> 
    %11 = llvm.sext %10 : vector<8xi8> to vector<8xi32>
    %12 = llvm.insertvalue %11, %9[2] : !llvm.array<8 x vector<8xi32>> 
    %13 = llvm.extractvalue %0[3] : !llvm.array<8 x vector<8xi8>> 
    %14 = llvm.sext %13 : vector<8xi8> to vector<8xi32>
    %15 = llvm.insertvalue %14, %12[3] : !llvm.array<8 x vector<8xi32>> 
    %16 = llvm.extractvalue %0[4] : !llvm.array<8 x vector<8xi8>> 
    %17 = llvm.sext %16 : vector<8xi8> to vector<8xi32>
    %18 = llvm.insertvalue %17, %15[4] : !llvm.array<8 x vector<8xi32>> 
    %19 = llvm.extractvalue %0[5] : !llvm.array<8 x vector<8xi8>> 
    %20 = llvm.sext %19 : vector<8xi8> to vector<8xi32>
    %21 = llvm.insertvalue %20, %18[5] : !llvm.array<8 x vector<8xi32>> 
    %22 = llvm.extractvalue %0[6] : !llvm.array<8 x vector<8xi8>> 
    %23 = llvm.sext %22 : vector<8xi8> to vector<8xi32>
    %24 = llvm.insertvalue %23, %21[6] : !llvm.array<8 x vector<8xi32>> 
    %25 = llvm.extractvalue %0[7] : !llvm.array<8 x vector<8xi8>> 
    %26 = llvm.sext %25 : vector<8xi8> to vector<8xi32>
    %27 = llvm.insertvalue %26, %24[7] : !llvm.array<8 x vector<8xi32>> 
    %28 = builtin.unrealized_conversion_cast %27 : !llvm.array<8 x vector<8xi32>> to vector<8x8xi32>
    %29 = builtin.unrealized_conversion_cast %28 : vector<8x8xi32> to !llvm.array<8 x vector<8xi32>>
    %30 = llvm.extractvalue %29[0] : !llvm.array<8 x vector<8xi32>> 
    %31 = llvm.mul %30, %2 : vector<8xi32>
    %32 = "llvm.intr.vector.reduce.add"(%31) : (vector<8xi32>) -> i32
    %33 = llvm.mlir.constant(0 : i64) : i64
    %34 = llvm.insertelement %32, %1[%33 : i64] : vector<8xi32>
    %35 = llvm.extractvalue %29[1] : !llvm.array<8 x vector<8xi32>> 
    %36 = llvm.mul %35, %2 : vector<8xi32>
    %37 = "llvm.intr.vector.reduce.add"(%36) : (vector<8xi32>) -> i32
    %38 = llvm.mlir.constant(1 : i64) : i64
    %39 = llvm.insertelement %37, %34[%38 : i64] : vector<8xi32>
    %40 = llvm.extractvalue %29[2] : !llvm.array<8 x vector<8xi32>> 
    %41 = llvm.mul %40, %2 : vector<8xi32>
    %42 = "llvm.intr.vector.reduce.add"(%41) : (vector<8xi32>) -> i32
    %43 = llvm.mlir.constant(2 : i64) : i64
    %44 = llvm.insertelement %42, %39[%43 : i64] : vector<8xi32>
    %45 = llvm.extractvalue %29[3] : !llvm.array<8 x vector<8xi32>> 
    %46 = llvm.mul %45, %2 : vector<8xi32>
    %47 = "llvm.intr.vector.reduce.add"(%46) : (vector<8xi32>) -> i32
    %48 = llvm.mlir.constant(3 : i64) : i64
    %49 = llvm.insertelement %47, %44[%48 : i64] : vector<8xi32>
    %50 = llvm.extractvalue %29[4] : !llvm.array<8 x vector<8xi32>> 
    %51 = llvm.mul %50, %2 : vector<8xi32>
    %52 = "llvm.intr.vector.reduce.add"(%51) : (vector<8xi32>) -> i32
    %53 = llvm.mlir.constant(4 : i64) : i64
    %54 = llvm.insertelement %52, %49[%53 : i64] : vector<8xi32>
    %55 = llvm.extractvalue %29[5] : !llvm.array<8 x vector<8xi32>> 
    %56 = llvm.mul %55, %2 : vector<8xi32>
    %57 = "llvm.intr.vector.reduce.add"(%56) : (vector<8xi32>) -> i32
    %58 = llvm.mlir.constant(5 : i64) : i64
    %59 = llvm.insertelement %57, %54[%58 : i64] : vector<8xi32>
    %60 = llvm.extractvalue %29[6] : !llvm.array<8 x vector<8xi32>> 
    %61 = llvm.mul %60, %2 : vector<8xi32>
    %62 = "llvm.intr.vector.reduce.add"(%61) : (vector<8xi32>) -> i32
    %63 = llvm.mlir.constant(6 : i64) : i64
    %64 = llvm.insertelement %62, %59[%63 : i64] : vector<8xi32>
    %65 = llvm.extractvalue %29[7] : !llvm.array<8 x vector<8xi32>> 
    %66 = llvm.mul %65, %2 : vector<8xi32>
    %67 = "llvm.intr.vector.reduce.add"(%66) : (vector<8xi32>) -> i32
    %68 = llvm.mlir.constant(7 : i64) : i64
    %69 = llvm.insertelement %67, %64[%68 : i64] : vector<8xi32>
    %70 = llvm.add %69, %arg2 : vector<8xi32>
    return %70 : vector<8xi32>
  }
  func.func @vector_arm_neon_k_unroll(%arg0: vector<2x16xi8>, %arg1: vector<2x16xi4>, %arg2: vector<2x2xi32>) -> vector<2x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<2x16xi4> to !llvm.array<2 x vector<16xi4>>
    %1 = builtin.unrealized_conversion_cast %arg2 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<2x16xi8> to !llvm.array<2 x vector<16xi8>>
    %3 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %4 = builtin.unrealized_conversion_cast %3 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %5 = builtin.unrealized_conversion_cast %4 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %6 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %7 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %8 = llvm.mlir.undef : !llvm.array<2 x vector<16xi8>>
    %9 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<16xi4>> 
    %10 = llvm.sext %9 : vector<16xi4> to vector<16xi8>
    %11 = llvm.insertvalue %10, %8[0] : !llvm.array<2 x vector<16xi8>> 
    %12 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<16xi4>> 
    %13 = llvm.sext %12 : vector<16xi4> to vector<16xi8>
    %14 = llvm.insertvalue %13, %11[1] : !llvm.array<2 x vector<16xi8>> 
    %15 = builtin.unrealized_conversion_cast %14 : !llvm.array<2 x vector<16xi8>> to vector<2x16xi8>
    %16 = builtin.unrealized_conversion_cast %15 : vector<2x16xi8> to !llvm.array<2 x vector<16xi8>>
    %17 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<16xi8>> 
    %18 = llvm.shufflevector %17, %17 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %19 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<16xi8>> 
    %20 = llvm.shufflevector %19, %19 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %21 = llvm.extractvalue %16[0] : !llvm.array<2 x vector<16xi8>> 
    %22 = llvm.shufflevector %21, %21 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %23 = llvm.extractvalue %16[1] : !llvm.array<2 x vector<16xi8>> 
    %24 = llvm.shufflevector %23, %23 [0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %25 = llvm.shufflevector %18, %18 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %26 = llvm.shufflevector %25, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %27 = llvm.shufflevector %20, %20 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %28 = llvm.shufflevector %27, %26 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %29 = llvm.shufflevector %22, %22 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %30 = llvm.shufflevector %29, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %31 = llvm.shufflevector %24, %24 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %32 = llvm.shufflevector %31, %30 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %33 = llvm.extractvalue %1[0] : !llvm.array<2 x vector<2xi32>> 
    %34 = llvm.shufflevector %33, %33 [0, 1, 0, 0] : vector<2xi32> 
    %35 = llvm.shufflevector %34, %6 [0, 1, 6, 7] : vector<4xi32> 
    %36 = llvm.extractvalue %1[1] : !llvm.array<2 x vector<2xi32>> 
    %37 = llvm.shufflevector %36, %36 [0, 1, 0, 0] : vector<2xi32> 
    %38 = llvm.shufflevector %37, %35 [4, 5, 0, 1] : vector<4xi32> 
    %39 = arm_neon.intr.smmla %38, %28, %32 : vector<16xi8> to vector<4xi32>
    %40 = llvm.extractvalue %2[0] : !llvm.array<2 x vector<16xi8>> 
    %41 = llvm.shufflevector %40, %40 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %42 = llvm.extractvalue %2[1] : !llvm.array<2 x vector<16xi8>> 
    %43 = llvm.shufflevector %42, %42 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %44 = llvm.extractvalue %16[0] : !llvm.array<2 x vector<16xi8>> 
    %45 = llvm.shufflevector %44, %44 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %46 = llvm.extractvalue %16[1] : !llvm.array<2 x vector<16xi8>> 
    %47 = llvm.shufflevector %46, %46 [8, 9, 10, 11, 12, 13, 14, 15] : vector<16xi8> 
    %48 = llvm.shufflevector %41, %41 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %49 = llvm.shufflevector %48, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %50 = llvm.shufflevector %43, %43 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %51 = llvm.shufflevector %50, %49 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %52 = llvm.shufflevector %45, %45 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %53 = llvm.shufflevector %52, %7 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %54 = llvm.shufflevector %47, %47 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %55 = llvm.shufflevector %54, %53 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %56 = arm_neon.intr.smmla %39, %51, %55 : vector<16xi8> to vector<4xi32>
    %57 = llvm.shufflevector %56, %56 [0, 1] : vector<4xi32> 
    %58 = llvm.insertvalue %57, %5[0] : !llvm.array<2 x vector<2xi32>> 
    %59 = llvm.shufflevector %56, %56 [2, 3] : vector<4xi32> 
    %60 = llvm.insertvalue %59, %58[1] : !llvm.array<2 x vector<2xi32>> 
    %61 = builtin.unrealized_conversion_cast %60 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    return %61 : vector<2x2xi32>
  }
  func.func @vector_arm_neon_k_unroll_vecmat(%arg0: vector<1x32xi8>, %arg1: vector<2x32xi4>, %arg2: vector<1x2xi32>) -> vector<1x2xi32> {
    %0 = builtin.unrealized_conversion_cast %arg1 : vector<2x32xi4> to !llvm.array<2 x vector<32xi4>>
    %1 = builtin.unrealized_conversion_cast %arg2 : vector<1x2xi32> to !llvm.array<1 x vector<2xi32>>
    %2 = builtin.unrealized_conversion_cast %arg0 : vector<1x32xi8> to !llvm.array<1 x vector<32xi8>>
    %3 = llvm.mlir.constant(dense<0> : vector<4xi32>) : vector<4xi32>
    %4 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8>
    %5 = llvm.mlir.constant(dense<0> : vector<2x2xi32>) : !llvm.array<2 x vector<2xi32>>
    %6 = builtin.unrealized_conversion_cast %5 : !llvm.array<2 x vector<2xi32>> to vector<2x2xi32>
    %7 = builtin.unrealized_conversion_cast %6 : vector<2x2xi32> to !llvm.array<2 x vector<2xi32>>
    %8 = llvm.mlir.constant(dense<0> : vector<2x8xi8>) : !llvm.array<2 x vector<8xi8>>
    %9 = builtin.unrealized_conversion_cast %8 : !llvm.array<2 x vector<8xi8>> to vector<2x8xi8>
    %10 = builtin.unrealized_conversion_cast %9 : vector<2x8xi8> to !llvm.array<2 x vector<8xi8>>
    %11 = llvm.mlir.constant(dense<0> : vector<1x2xi32>) : !llvm.array<1 x vector<2xi32>>
    %12 = builtin.unrealized_conversion_cast %11 : !llvm.array<1 x vector<2xi32>> to vector<1x2xi32>
    %13 = builtin.unrealized_conversion_cast %12 : vector<1x2xi32> to !llvm.array<1 x vector<2xi32>>
    %14 = llvm.mlir.undef : !llvm.array<2 x vector<32xi8>>
    %15 = llvm.extractvalue %0[0] : !llvm.array<2 x vector<32xi4>> 
    %16 = llvm.sext %15 : vector<32xi4> to vector<32xi8>
    %17 = llvm.insertvalue %16, %14[0] : !llvm.array<2 x vector<32xi8>> 
    %18 = llvm.extractvalue %0[1] : !llvm.array<2 x vector<32xi4>> 
    %19 = llvm.sext %18 : vector<32xi4> to vector<32xi8>
    %20 = llvm.insertvalue %19, %17[1] : !llvm.array<2 x vector<32xi8>> 
    %21 = builtin.unrealized_conversion_cast %20 : !llvm.array<2 x vector<32xi8>> to vector<2x32xi8>
    %22 = builtin.unrealized_conversion_cast %21 : vector<2x32xi8> to !llvm.array<2 x vector<32xi8>>
    %23 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<32xi8>> 
    %24 = llvm.shufflevector %23, %23 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8> 
    %25 = llvm.extractvalue %22[0] : !llvm.array<2 x vector<32xi8>> 
    %26 = llvm.shufflevector %25, %25 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8> 
    %27 = llvm.extractvalue %22[1] : !llvm.array<2 x vector<32xi8>> 
    %28 = llvm.shufflevector %27, %27 [0, 1, 2, 3, 4, 5, 6, 7] : vector<32xi8> 
    %29 = llvm.shufflevector %24, %24 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %30 = llvm.shufflevector %29, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %31 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %32 = llvm.shufflevector %31, %31 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %33 = llvm.shufflevector %32, %30 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %34 = llvm.shufflevector %26, %26 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %35 = llvm.shufflevector %34, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %36 = llvm.shufflevector %28, %28 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %37 = llvm.shufflevector %36, %35 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %38 = llvm.extractvalue %1[0] : !llvm.array<1 x vector<2xi32>> 
    %39 = llvm.shufflevector %38, %38 [0, 1, 0, 0] : vector<2xi32> 
    %40 = llvm.shufflevector %39, %3 [0, 1, 6, 7] : vector<4xi32> 
    %41 = llvm.extractvalue %7[1] : !llvm.array<2 x vector<2xi32>> 
    %42 = llvm.shufflevector %41, %41 [0, 1, 0, 0] : vector<2xi32> 
    %43 = llvm.shufflevector %42, %40 [4, 5, 0, 1] : vector<4xi32> 
    %44 = arm_neon.intr.smmla %43, %33, %37 : vector<16xi8> to vector<4xi32>
    %45 = llvm.shufflevector %44, %44 [0, 1] : vector<4xi32> 
    %46 = llvm.insertvalue %45, %13[0] : !llvm.array<1 x vector<2xi32>> 
    %47 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<32xi8>> 
    %48 = llvm.shufflevector %47, %47 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8> 
    %49 = llvm.extractvalue %22[0] : !llvm.array<2 x vector<32xi8>> 
    %50 = llvm.shufflevector %49, %49 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8> 
    %51 = llvm.extractvalue %22[1] : !llvm.array<2 x vector<32xi8>> 
    %52 = llvm.shufflevector %51, %51 [8, 9, 10, 11, 12, 13, 14, 15] : vector<32xi8> 
    %53 = llvm.shufflevector %48, %48 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %54 = llvm.shufflevector %53, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %55 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %56 = llvm.shufflevector %55, %55 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %57 = llvm.shufflevector %56, %54 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %58 = llvm.shufflevector %50, %50 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %59 = llvm.shufflevector %58, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %60 = llvm.shufflevector %52, %52 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %61 = llvm.shufflevector %60, %59 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %62 = arm_neon.intr.smmla %44, %57, %61 : vector<16xi8> to vector<4xi32>
    %63 = llvm.shufflevector %62, %62 [0, 1] : vector<4xi32> 
    %64 = llvm.insertvalue %63, %46[0] : !llvm.array<1 x vector<2xi32>> 
    %65 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<32xi8>> 
    %66 = llvm.shufflevector %65, %65 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8> 
    %67 = llvm.extractvalue %22[0] : !llvm.array<2 x vector<32xi8>> 
    %68 = llvm.shufflevector %67, %67 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8> 
    %69 = llvm.extractvalue %22[1] : !llvm.array<2 x vector<32xi8>> 
    %70 = llvm.shufflevector %69, %69 [16, 17, 18, 19, 20, 21, 22, 23] : vector<32xi8> 
    %71 = llvm.shufflevector %66, %66 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %72 = llvm.shufflevector %71, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %73 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %74 = llvm.shufflevector %73, %73 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %75 = llvm.shufflevector %74, %72 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %76 = llvm.shufflevector %68, %68 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %77 = llvm.shufflevector %76, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %78 = llvm.shufflevector %70, %70 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %79 = llvm.shufflevector %78, %77 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %80 = arm_neon.intr.smmla %62, %75, %79 : vector<16xi8> to vector<4xi32>
    %81 = llvm.shufflevector %80, %80 [0, 1] : vector<4xi32> 
    %82 = llvm.insertvalue %81, %64[0] : !llvm.array<1 x vector<2xi32>> 
    %83 = llvm.extractvalue %2[0] : !llvm.array<1 x vector<32xi8>> 
    %84 = llvm.shufflevector %83, %83 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8> 
    %85 = llvm.extractvalue %22[0] : !llvm.array<2 x vector<32xi8>> 
    %86 = llvm.shufflevector %85, %85 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8> 
    %87 = llvm.extractvalue %22[1] : !llvm.array<2 x vector<32xi8>> 
    %88 = llvm.shufflevector %87, %87 [24, 25, 26, 27, 28, 29, 30, 31] : vector<32xi8> 
    %89 = llvm.shufflevector %84, %84 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %90 = llvm.shufflevector %89, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %91 = llvm.extractvalue %10[1] : !llvm.array<2 x vector<8xi8>> 
    %92 = llvm.shufflevector %91, %91 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %93 = llvm.shufflevector %92, %90 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %94 = llvm.shufflevector %86, %86 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %95 = llvm.shufflevector %94, %4 [0, 1, 2, 3, 4, 5, 6, 7, 24, 25, 26, 27, 28, 29, 30, 31] : vector<16xi8> 
    %96 = llvm.shufflevector %88, %88 [0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] : vector<8xi8> 
    %97 = llvm.shufflevector %96, %95 [16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5, 6, 7] : vector<16xi8> 
    %98 = arm_neon.intr.smmla %80, %93, %97 : vector<16xi8> to vector<4xi32>
    %99 = llvm.shufflevector %98, %98 [0, 1] : vector<4xi32> 
    %100 = llvm.insertvalue %99, %82[0] : !llvm.array<1 x vector<2xi32>> 
    %101 = builtin.unrealized_conversion_cast %100 : !llvm.array<1 x vector<2xi32>> to vector<1x2xi32>
    return %101 : vector<1x2xi32>
  }
}

